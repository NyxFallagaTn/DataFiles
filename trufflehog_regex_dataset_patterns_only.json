{
  "patterns": [
    {
      "pattern": "\\b(aio\\_[a-zA-Z0-9]{28})\\b",
      "detector_name": "adafruitio",
      "file_path": "trufflehog-main\\pkg\\detectors\\adafruitio\\adafruitio.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(aio\\_[a-zA-Z0-9]{28})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(aio\\_[a-zA-Z0-9]{28})\\b",
      "detector_name": "adafruitio",
      "file_path": "trufflehog-main\\pkg\\detectors\\adafruitio\\adafruitio.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(aio\\_[a-zA-Z0-9]{28})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([A-Za-z0-9](?:[A-Za-z0-9\\-]{0,61}[A-Za-z0-9])\\.aha\\.io)",
      "detector_name": "aha",
      "file_path": "trufflehog-main\\pkg\\detectors\\aha\\aha.go",
      "line_number": 28,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"aha\"}) + `\\b([0-9a-f]{64})\\b`)\n\tURLPat = regexp.MustCompile(`\\b([A-Za-z0-9](?:[A-Za-z0-9\\-]{0,61}[A-Za-z0-9])\\.aha\\.io)`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([A-Za-z0-9](?:[A-Za-z0-9\\-]{0,61}[A-Za-z0-9])\\.aha\\.io)",
      "detector_name": "aha",
      "file_path": "trufflehog-main\\pkg\\detectors\\aha\\aha.go",
      "line_number": 28,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"aha\"}) + `\\b([0-9a-f]{64})\\b`)\n\tURLPat = regexp.MustCompile(`\\b([A-Za-z0-9](?:[A-Za-z0-9\\-]{0,61}[A-Za-z0-9])\\.aha\\.io)`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "URLPat"
    },
    {
      "pattern": "\\b([[:alnum:]]+\\.v1\\.[a-zA-Z0-9_-]+\\.[a-f0-9]+)\\b",
      "detector_name": "airtableoauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\airtableoauth\\airtableoauth.go",
      "line_number": 28,
      "context": "\t// Airtable OAuth does not support generating access tokens using client ID and key\n\t// Reference: https://airtable.com/developers/web/api/oauth-reference\n\ttokenPat = regexp.MustCompile(`\\b([[:alnum:]]+\\.v1\\.[a-zA-Z0-9_-]+\\.[a-f0-9]+)\\b`)\n)\n",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([[:alnum:]]+\\.v1\\.[a-zA-Z0-9_-]+\\.[a-f0-9]+)\\b",
      "detector_name": "airtableoauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\airtableoauth\\airtableoauth.go",
      "line_number": 28,
      "context": "\t// Airtable OAuth does not support generating access tokens using client ID and key\n\t// Reference: https://airtable.com/developers/web/api/oauth-reference\n\ttokenPat = regexp.MustCompile(`\\b([[:alnum:]]+\\.v1\\.[a-zA-Z0-9_-]+\\.[a-f0-9]+)\\b`)\n)\n",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": "tokenPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9]{30})\\b",
      "detector_name": "alibaba",
      "file_path": "trufflehog-main\\pkg\\detectors\\alibaba\\alibaba.go",
      "line_number": 46,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([a-zA-Z0-9]{30})\\b`)\n\tidPat  = regexp.MustCompile(`\\b(LTAI[a-zA-Z0-9]{17,21})[\\\"';\\s]*`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9]{30})\\b",
      "detector_name": "alibaba",
      "file_path": "trufflehog-main\\pkg\\detectors\\alibaba\\alibaba.go",
      "line_number": 46,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([a-zA-Z0-9]{30})\\b`)\n\tidPat  = regexp.MustCompile(`\\b(LTAI[a-zA-Z0-9]{17,21})[\\\"';\\s]*`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(LTAI[a-zA-Z0-9]{17,21})[\\\"';\\s]*",
      "detector_name": "alibaba",
      "file_path": "trufflehog-main\\pkg\\detectors\\alibaba\\alibaba.go",
      "line_number": 47,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([a-zA-Z0-9]{30})\\b`)\n\tidPat  = regexp.MustCompile(`\\b(LTAI[a-zA-Z0-9]{17,21})[\\\"';\\s]*`)\n)\n",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(LTAI[a-zA-Z0-9]{17,21})[\\\"';\\s]*",
      "detector_name": "alibaba",
      "file_path": "trufflehog-main\\pkg\\detectors\\alibaba\\alibaba.go",
      "line_number": 47,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([a-zA-Z0-9]{30})\\b`)\n\tidPat  = regexp.MustCompile(`\\b(LTAI[a-zA-Z0-9]{17,21})[\\\"';\\s]*`)\n)\n",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": "idPat"
    },
    {
      "pattern": "\\b(sk-ant-(?:admin01|api03)-[\\w\\-]{93}AA)\\b",
      "detector_name": "anthropic",
      "file_path": "trufflehog-main\\pkg\\detectors\\anthropic\\anthropic.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sk-ant-(?:admin01|api03)-[\\w\\-]{93}AA)\\b`)\n\n\t// verification endpoints",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sk-ant-(?:admin01|api03)-[\\w\\-]{93}AA)\\b",
      "detector_name": "anthropic",
      "file_path": "trufflehog-main\\pkg\\detectors\\anthropic\\anthropic.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sk-ant-(?:admin01|api03)-[\\w\\-]{93}AA)\\b`)\n\n\t// verification endpoints",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12})\\b",
      "detector_name": "anypoint",
      "file_path": "trufflehog-main\\pkg\\detectors\\anypoint\\anypoint.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12})\\b`)\n\torgPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"org\"}) + `\\b([0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12})\\b",
      "detector_name": "anypoint",
      "file_path": "trufflehog-main\\pkg\\detectors\\anypoint\\anypoint.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12})\\b`)\n\torgPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"org\"}) + `\\b([0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(sk_live_[a-z0-9A-Z-]{93})\\b",
      "detector_name": "apideck",
      "file_path": "trufflehog-main\\pkg\\detectors\\apideck\\apideck.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sk_live_[a-z0-9A-Z-]{93})\\b`)\n\tidPat  = regexp.MustCompile(detectors.PrefixRegex([]string{\"apideck\"}) + `\\b([a-z0-9A-Z]{40})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sk_live_[a-z0-9A-Z-]{93})\\b",
      "detector_name": "apideck",
      "file_path": "trufflehog-main\\pkg\\detectors\\apideck\\apideck.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sk_live_[a-z0-9A-Z-]{93})\\b`)\n\tidPat  = regexp.MustCompile(detectors.PrefixRegex([]string{\"apideck\"}) + `\\b([a-z0-9A-Z]{40})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(apify\\_api\\_[a-zA-Z-0-9]{36})\\b",
      "detector_name": "apify",
      "file_path": "trufflehog-main\\pkg\\detectors\\apify\\apify.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(apify\\_api\\_[a-zA-Z-0-9]{36})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(apify\\_api\\_[a-zA-Z-0-9]{36})\\b",
      "detector_name": "apify",
      "file_path": "trufflehog-main\\pkg\\detectors\\apify\\apify.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(apify\\_api\\_[a-zA-Z-0-9]{36})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9]{64,73})\\b",
      "detector_name": "artifactory",
      "file_path": "trufflehog-main\\pkg\\detectors\\artifactory\\artifactory.go",
      "line_number": 32,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([a-zA-Z0-9]{64,73})\\b`)\n\tURLPat = regexp.MustCompile(`\\b([A-Za-z0-9][A-Za-z0-9\\-]{0,61}[A-Za-z0-9]\\.jfrog\\.io)`)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9]{64,73})\\b",
      "detector_name": "artifactory",
      "file_path": "trufflehog-main\\pkg\\detectors\\artifactory\\artifactory.go",
      "line_number": 32,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([a-zA-Z0-9]{64,73})\\b`)\n\tURLPat = regexp.MustCompile(`\\b([A-Za-z0-9][A-Za-z0-9\\-]{0,61}[A-Za-z0-9]\\.jfrog\\.io)`)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([A-Za-z0-9][A-Za-z0-9\\-]{0,61}[A-Za-z0-9]\\.jfrog\\.io)",
      "detector_name": "artifactory",
      "file_path": "trufflehog-main\\pkg\\detectors\\artifactory\\artifactory.go",
      "line_number": 33,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([a-zA-Z0-9]{64,73})\\b`)\n\tURLPat = regexp.MustCompile(`\\b([A-Za-z0-9][A-Za-z0-9\\-]{0,61}[A-Za-z0-9]\\.jfrog\\.io)`)\n\n\tinvalidHosts = simple.NewCache[struct{}]()",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([A-Za-z0-9][A-Za-z0-9\\-]{0,61}[A-Za-z0-9]\\.jfrog\\.io)",
      "detector_name": "artifactory",
      "file_path": "trufflehog-main\\pkg\\detectors\\artifactory\\artifactory.go",
      "line_number": 33,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([a-zA-Z0-9]{64,73})\\b`)\n\tURLPat = regexp.MustCompile(`\\b([A-Za-z0-9][A-Za-z0-9\\-]{0,61}[A-Za-z0-9]\\.jfrog\\.io)`)\n\n\tinvalidHosts = simple.NewCache[struct{}]()",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "URLPat"
    },
    {
      "pattern": "\\b(ATCTT3xFfG[A-Za-z0-9+/=_-]+=[A-Za-z0-9]{8})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\atlassian\\v2\\atlassian.go",
      "line_number": 38,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(ATCTT3xFfG[A-Za-z0-9+/=_-]+=[A-Za-z0-9]{8})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(ATCTT3xFfG[A-Za-z0-9+/=_-]+=[A-Za-z0-9]{8})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\atlassian\\v2\\atlassian.go",
      "line_number": 38,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(ATCTT3xFfG[A-Za-z0-9+/=_-]+=[A-Za-z0-9]{8})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(ey[a-zA-Z0-9._-]+)\\b",
      "detector_name": "auth0managementapitoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\auth0managementapitoken\\auth0managementapitoken.go",
      "line_number": 29,
      "context": "\t// long jwt token but note this is default 8640000 seconds = 24 hours but could be set to maximum 2592000 seconds = 720 hours = 30 days\n\t// at https://manage.auth0.com/dashboard/us/dev-63memjo3/apis/management/explorer\n\tmanagementAPITokenPat = regexp.MustCompile(`\\b(ey[a-zA-Z0-9._-]+)\\b`)\n\tdomainPat             = regexp.MustCompile(`([a-zA-Z0-9\\-]{2,16}\\.[a-zA-Z0-9_-]{2,3}\\.auth0\\.com)`) // could be part of url\n)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(ey[a-zA-Z0-9._-]+)\\b",
      "detector_name": "auth0managementapitoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\auth0managementapitoken\\auth0managementapitoken.go",
      "line_number": 29,
      "context": "\t// long jwt token but note this is default 8640000 seconds = 24 hours but could be set to maximum 2592000 seconds = 720 hours = 30 days\n\t// at https://manage.auth0.com/dashboard/us/dev-63memjo3/apis/management/explorer\n\tmanagementAPITokenPat = regexp.MustCompile(`\\b(ey[a-zA-Z0-9._-]+)\\b`)\n\tdomainPat             = regexp.MustCompile(`([a-zA-Z0-9\\-]{2,16}\\.[a-zA-Z0-9_-]{2,3}\\.auth0\\.com)`) // could be part of url\n)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": "managementAPITokenPat"
    },
    {
      "pattern": "([a-zA-Z0-9\\-]{2,16}\\.[a-zA-Z0-9_-]{2,3}\\.auth0\\.com)",
      "detector_name": "auth0managementapitoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\auth0managementapitoken\\auth0managementapitoken.go",
      "line_number": 30,
      "context": "\t// at https://manage.auth0.com/dashboard/us/dev-63memjo3/apis/management/explorer\n\tmanagementAPITokenPat = regexp.MustCompile(`\\b(ey[a-zA-Z0-9._-]+)\\b`)\n\tdomainPat             = regexp.MustCompile(`([a-zA-Z0-9\\-]{2,16}\\.[a-zA-Z0-9_-]{2,3}\\.auth0\\.com)`) // could be part of url\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "([a-zA-Z0-9\\-]{2,16}\\.[a-zA-Z0-9_-]{2,3}\\.auth0\\.com)",
      "detector_name": "auth0managementapitoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\auth0managementapitoken\\auth0managementapitoken.go",
      "line_number": 30,
      "context": "\t// at https://manage.auth0.com/dashboard/us/dev-63memjo3/apis/management/explorer\n\tmanagementAPITokenPat = regexp.MustCompile(`\\b(ey[a-zA-Z0-9._-]+)\\b`)\n\tdomainPat             = regexp.MustCompile(`([a-zA-Z0-9\\-]{2,16}\\.[a-zA-Z0-9_-]{2,3}\\.auth0\\.com)`) // could be part of url\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "domainPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9_-]{64,})\\b",
      "detector_name": "auth0oauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\auth0oauth\\auth0oauth.go",
      "line_number": 29,
      "context": "\n\tclientIdPat     = regexp.MustCompile(detectors.PrefixRegex([]string{\"auth0\"}) + `\\b([a-zA-Z0-9_-]{32,60})\\b`)\n\tclientSecretPat = regexp.MustCompile(`\\b([a-zA-Z0-9_-]{64,})\\b`)\n\tdomainPat       = regexp.MustCompile(`\\b([a-zA-Z0-9][a-zA-Z0-9._-]*auth0\\.com)\\b`) // could be part of url\n)",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9_-]{64,})\\b",
      "detector_name": "auth0oauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\auth0oauth\\auth0oauth.go",
      "line_number": 29,
      "context": "\n\tclientIdPat     = regexp.MustCompile(detectors.PrefixRegex([]string{\"auth0\"}) + `\\b([a-zA-Z0-9_-]{32,60})\\b`)\n\tclientSecretPat = regexp.MustCompile(`\\b([a-zA-Z0-9_-]{64,})\\b`)\n\tdomainPat       = regexp.MustCompile(`\\b([a-zA-Z0-9][a-zA-Z0-9._-]*auth0\\.com)\\b`) // could be part of url\n)",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "clientSecretPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9][a-zA-Z0-9._-]*auth0\\.com)\\b",
      "detector_name": "auth0oauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\auth0oauth\\auth0oauth.go",
      "line_number": 30,
      "context": "\tclientIdPat     = regexp.MustCompile(detectors.PrefixRegex([]string{\"auth0\"}) + `\\b([a-zA-Z0-9_-]{32,60})\\b`)\n\tclientSecretPat = regexp.MustCompile(`\\b([a-zA-Z0-9_-]{64,})\\b`)\n\tdomainPat       = regexp.MustCompile(`\\b([a-zA-Z0-9][a-zA-Z0-9._-]*auth0\\.com)\\b`) // could be part of url\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9][a-zA-Z0-9._-]*auth0\\.com)\\b",
      "detector_name": "auth0oauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\auth0oauth\\auth0oauth.go",
      "line_number": 30,
      "context": "\tclientIdPat     = regexp.MustCompile(detectors.PrefixRegex([]string{\"auth0\"}) + `\\b([a-zA-Z0-9_-]{32,60})\\b`)\n\tclientSecretPat = regexp.MustCompile(`\\b([a-zA-Z0-9_-]{64,})\\b`)\n\tdomainPat       = regexp.MustCompile(`\\b([a-zA-Z0-9][a-zA-Z0-9._-]*auth0\\.com)\\b`) // could be part of url\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "domainPat"
    },
    {
      "pattern": "(?:[^A-Za-z0-9+/]|\\A)([A-Za-z0-9+/]{40})(?:[^A-Za-z0-9+/]|\\z)",
      "detector_name": "aws",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\common.go",
      "line_number": 10,
      "context": ")\n\nvar SecretPat = regexp.MustCompile(`(?:[^A-Za-z0-9+/]|\\A)([A-Za-z0-9+/]{40})(?:[^A-Za-z0-9+/]|\\z)`)\n\ntype IdentityResponse struct {",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?:[^A-Za-z0-9+/]|\\A)([A-Za-z0-9+/]{40})(?:[^A-Za-z0-9+/]|\\z)",
      "detector_name": "aws",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\common.go",
      "line_number": 10,
      "context": ")\n\nvar SecretPat = regexp.MustCompile(`(?:[^A-Za-z0-9+/]|\\A)([A-Za-z0-9+/]{40})(?:[^A-Za-z0-9+/]|\\z)`)\n\ntype IdentityResponse struct {",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "SecretPat"
    },
    {
      "pattern": "(?:[^A-Za-z0-9+/]|\\A)([A-Za-z0-9+/]{40})(?:[^A-Za-z0-9+/]|\\z)",
      "detector_name": "aws",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\common.go",
      "line_number": 10,
      "context": ")\n\nvar SecretPat = regexp.MustCompile(`(?:[^A-Za-z0-9+/]|\\A)([A-Za-z0-9+/]{40})(?:[^A-Za-z0-9+/]|\\z)`)\n\ntype IdentityResponse struct {",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "SecretPat"
    },
    {
      "pattern": "[a-f0-9]{40}",
      "detector_name": "aws",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\utils.go",
      "line_number": 47,
      "context": "// But they are extremely unlikely to be generated as an actual AWS secret.\n// So when we find them, if they're not verified, we should ignore the result.\nvar FalsePositiveSecretPat = regexp.MustCompile(`[a-f0-9]{40}`)\n\nfunc GetAccountNumFromID(id string) (string, error) {",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "[a-f0-9]{40}",
      "detector_name": "aws",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\utils.go",
      "line_number": 47,
      "context": "// But they are extremely unlikely to be generated as an actual AWS secret.\n// So when we find them, if they're not verified, we should ignore the result.\nvar FalsePositiveSecretPat = regexp.MustCompile(`[a-f0-9]{40}`)\n\nfunc GetAccountNumFromID(id string) (string, error) {",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "FalsePositiveSecretPat"
    },
    {
      "pattern": "[a-f0-9]{40}",
      "detector_name": "aws",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\utils.go",
      "line_number": 47,
      "context": "// But they are extremely unlikely to be generated as an actual AWS secret.\n// So when we find them, if they're not verified, we should ignore the result.\nvar FalsePositiveSecretPat = regexp.MustCompile(`[a-f0-9]{40}`)\n\nfunc GetAccountNumFromID(id string) (string, error) {",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "FalsePositiveSecretPat"
    },
    {
      "pattern": "\\b((?:AKIA|ABIA|ACCA)[A-Z0-9]{16})\\b",
      "detector_name": "access_keys",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\access_keys\\accesskey.go",
      "line_number": 65,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\t// Key types are from this list https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids\n\tidPat = regexp.MustCompile(`\\b((?:AKIA|ABIA|ACCA)[A-Z0-9]{16})\\b`)\n)\n",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b((?:AKIA|ABIA|ACCA)[A-Z0-9]{16})\\b",
      "detector_name": "access_keys",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\access_keys\\accesskey.go",
      "line_number": 65,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\t// Key types are from this list https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids\n\tidPat = regexp.MustCompile(`\\b((?:AKIA|ABIA|ACCA)[A-Z0-9]{16})\\b`)\n)\n",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": "idPat"
    },
    {
      "pattern": "\\b((?:ASIA)[A-Z0-9]{16})\\b",
      "detector_name": "session_keys",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\session_keys\\sessionkey.go",
      "line_number": 61,
      "context": "\n\t// Key types are from this list https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids\n\tidPat      = regexp.MustCompile(`\\b((?:ASIA)[A-Z0-9]{16})\\b`)\n\tsessionPat = regexp.MustCompile(`(?:[^A-Za-z0-9+/]|\\A)([a-zA-Z0-9+/]{100,}={0,3})(?:[^A-Za-z0-9+/=]|\\z)`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b((?:ASIA)[A-Z0-9]{16})\\b",
      "detector_name": "session_keys",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\session_keys\\sessionkey.go",
      "line_number": 61,
      "context": "\n\t// Key types are from this list https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids\n\tidPat      = regexp.MustCompile(`\\b((?:ASIA)[A-Z0-9]{16})\\b`)\n\tsessionPat = regexp.MustCompile(`(?:[^A-Za-z0-9+/]|\\A)([a-zA-Z0-9+/]{100,}={0,3})(?:[^A-Za-z0-9+/=]|\\z)`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": "idPat"
    },
    {
      "pattern": "(?:[^A-Za-z0-9+/]|\\A)([a-zA-Z0-9+/]{100,}={0,3})(?:[^A-Za-z0-9+/=]|\\z)",
      "detector_name": "session_keys",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\session_keys\\sessionkey.go",
      "line_number": 62,
      "context": "\t// Key types are from this list https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids\n\tidPat      = regexp.MustCompile(`\\b((?:ASIA)[A-Z0-9]{16})\\b`)\n\tsessionPat = regexp.MustCompile(`(?:[^A-Za-z0-9+/]|\\A)([a-zA-Z0-9+/]{100,}={0,3})(?:[^A-Za-z0-9+/=]|\\z)`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?:[^A-Za-z0-9+/]|\\A)([a-zA-Z0-9+/]{100,}={0,3})(?:[^A-Za-z0-9+/=]|\\z)",
      "detector_name": "session_keys",
      "file_path": "trufflehog-main\\pkg\\detectors\\aws\\session_keys\\sessionkey.go",
      "line_number": 62,
      "context": "\t// Key types are from this list https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-unique-ids\n\tidPat      = regexp.MustCompile(`\\b((?:ASIA)[A-Z0-9]{16})\\b`)\n\tsessionPat = regexp.MustCompile(`(?:[^A-Za-z0-9+/]|\\A)([a-zA-Z0-9+/]{100,}={0,3})(?:[^A-Za-z0-9+/=]|\\z)`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "sessionPat"
    },
    {
      "pattern": "\\d+\\.\\d+\\.\\d+",
      "detector_name": "repositorykey",
      "file_path": "trufflehog-main\\pkg\\detectors\\azureapimanagement\\repositorykey\\repositorykey.go",
      "line_number": 115,
      "context": "\n\t// Extract the version string using a regex to find the version numbers\n\tvar regex = regexp.MustCompile(`\\d+\\.\\d+\\.\\d+`)\n\n\tversionStr := regex.FindString(string(out))",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\d+\\.\\d+\\.\\d+",
      "detector_name": "repositorykey",
      "file_path": "trufflehog-main\\pkg\\detectors\\azureapimanagement\\repositorykey\\repositorykey.go",
      "line_number": 115,
      "context": "\n\t// Extract the version string using a regex to find the version numbers\n\tvar regex = regexp.MustCompile(`\\d+\\.\\d+\\.\\d+`)\n\n\tversionStr := regex.FindString(string(out))",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "regex"
    },
    {
      "pattern": "https://([a-z0-9][a-z0-9-]{0,48}[a-z0-9])\\.azure-api\\.net",
      "detector_name": "azureapimanagementsubscriptionkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\azureapimanagementsubscriptionkey\\azureapimanagementsubscriptionkey.go",
      "line_number": 30,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\turlPat        = regexp.MustCompile(`https://([a-z0-9][a-z0-9-]{0,48}[a-z0-9])\\.azure-api\\.net`)                                              // https://azure.github.io/PSRule.Rules.Azure/en/rules/Azure.APIM.Name/\n\tkeyPat        = regexp.MustCompile(detectors.PrefixRegex([]string{\"azure\", \".azure-api.net\", \"subscription\", \"key\"}) + `([a-zA-Z-0-9]{32})`) // pattern for both Primary and secondary key\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "https://([a-z0-9][a-z0-9-]{0,48}[a-z0-9])\\.azure-api\\.net",
      "detector_name": "azureapimanagementsubscriptionkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\azureapimanagementsubscriptionkey\\azureapimanagementsubscriptionkey.go",
      "line_number": 30,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\turlPat        = regexp.MustCompile(`https://([a-z0-9][a-z0-9-]{0,48}[a-z0-9])\\.azure-api\\.net`)                                              // https://azure.github.io/PSRule.Rules.Azure/en/rules/Azure.APIM.Name/\n\tkeyPat        = regexp.MustCompile(detectors.PrefixRegex([]string{\"azure\", \".azure-api.net\", \"subscription\", \"key\"}) + `([a-zA-Z-0-9]{32})`) // pattern for both Primary and secondary key\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "Endpoint=(https:\\/\\/[a-zA-Z0-9-]+\\.azconfig\\.io);Id=([a-zA-Z0-9+\\/=]+);Secret=([a-zA-Z0-9+\\/=]+)",
      "detector_name": "azureappconfigconnectionstring",
      "file_path": "trufflehog-main\\pkg\\detectors\\azureappconfigconnectionstring\\azureappconfigconnectionstring.go",
      "line_number": 30,
      "context": "var (\n\tdefaultClient       = common.SaneHttpClient()\n\tconnectionStringPat = regexp.MustCompile(`Endpoint=(https:\\/\\/[a-zA-Z0-9-]+\\.azconfig\\.io);Id=([a-zA-Z0-9+\\/=]+);Secret=([a-zA-Z0-9+\\/=]+)`)\n)\n",
      "pattern_type": "verification",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "Endpoint=(https:\\/\\/[a-zA-Z0-9-]+\\.azconfig\\.io);Id=([a-zA-Z0-9+\\/=]+);Secret=([a-zA-Z0-9+\\/=]+)",
      "detector_name": "azureappconfigconnectionstring",
      "file_path": "trufflehog-main\\pkg\\detectors\\azureappconfigconnectionstring\\azureappconfigconnectionstring.go",
      "line_number": 30,
      "context": "var (\n\tdefaultClient       = common.SaneHttpClient()\n\tconnectionStringPat = regexp.MustCompile(`Endpoint=(https:\\/\\/[a-zA-Z0-9-]+\\.azconfig\\.io);Id=([a-zA-Z0-9+\\/=]+);Secret=([a-zA-Z0-9+\\/=]+)`)\n)\n",
      "pattern_type": "verification",
      "is_compiled": true,
      "variable_name": "connectionStringPat"
    },
    {
      "pattern": "([a-z0-9][a-z0-9-]{1,100}[a-z0-9])\\.azurecr\\.io",
      "detector_name": "azurecontainerregistry",
      "file_path": "trufflehog-main\\pkg\\detectors\\azurecontainerregistry\\azurecontainerregistry.go",
      "line_number": 32,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\turlPat      = regexp.MustCompile(`([a-z0-9][a-z0-9-]{1,100}[a-z0-9])\\.azurecr\\.io`)\n\tpasswordPat = regexp.MustCompile(`\\b[a-zA-Z0-9+/]{42}\\+ACR[a-zA-Z0-9]{6}\\b`)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "([a-z0-9][a-z0-9-]{1,100}[a-z0-9])\\.azurecr\\.io",
      "detector_name": "azurecontainerregistry",
      "file_path": "trufflehog-main\\pkg\\detectors\\azurecontainerregistry\\azurecontainerregistry.go",
      "line_number": 32,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\turlPat      = regexp.MustCompile(`([a-z0-9][a-z0-9-]{1,100}[a-z0-9])\\.azurecr\\.io`)\n\tpasswordPat = regexp.MustCompile(`\\b[a-zA-Z0-9+/]{42}\\+ACR[a-zA-Z0-9]{6}\\b`)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "\\b[a-zA-Z0-9+/]{42}\\+ACR[a-zA-Z0-9]{6}\\b",
      "detector_name": "azurecontainerregistry",
      "file_path": "trufflehog-main\\pkg\\detectors\\azurecontainerregistry\\azurecontainerregistry.go",
      "line_number": 33,
      "context": "\n\turlPat      = regexp.MustCompile(`([a-z0-9][a-z0-9-]{1,100}[a-z0-9])\\.azurecr\\.io`)\n\tpasswordPat = regexp.MustCompile(`\\b[a-zA-Z0-9+/]{42}\\+ACR[a-zA-Z0-9]{6}\\b`)\n\n\tinvalidHosts = simple.NewCache[struct{}]()",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b[a-zA-Z0-9+/]{42}\\+ACR[a-zA-Z0-9]{6}\\b",
      "detector_name": "azurecontainerregistry",
      "file_path": "trufflehog-main\\pkg\\detectors\\azurecontainerregistry\\azurecontainerregistry.go",
      "line_number": 33,
      "context": "\n\turlPat      = regexp.MustCompile(`([a-z0-9][a-z0-9-]{1,100}[a-z0-9])\\.azurecr\\.io`)\n\tpasswordPat = regexp.MustCompile(`\\b[a-zA-Z0-9+/]{42}\\+ACR[a-zA-Z0-9]{6}\\b`)\n\n\tinvalidHosts = simple.NewCache[struct{}]()",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": "passwordPat"
    },
    {
      "pattern": "https://([a-z0-9][a-z0-9-]{0,48}[a-z0-9])\\.management\\.azure-api\\.net",
      "detector_name": "azuredirectmanagementkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\azuredirectmanagementkey\\azuredirectmanagementkey.go",
      "line_number": 36,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\turlPat        = regexp.MustCompile(`https://([a-z0-9][a-z0-9-]{0,48}[a-z0-9])\\.management\\.azure-api\\.net`)                                        // https://azure.github.io/PSRule.Rules.Azure/en/rules/Azure.APIM.Name/\n\tkeyPat        = regexp.MustCompile(detectors.PrefixRegex([]string{\"azure\", \".management.azure-api.net\"}) + `([a-zA-Z0-9+\\/]{83,85}[a-zA-Z0-9]==)`) // pattern for both Primary and secondary key\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "https://([a-z0-9][a-z0-9-]{0,48}[a-z0-9])\\.management\\.azure-api\\.net",
      "detector_name": "azuredirectmanagementkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\azuredirectmanagementkey\\azuredirectmanagementkey.go",
      "line_number": 36,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\turlPat        = regexp.MustCompile(`https://([a-z0-9][a-z0-9-]{0,48}[a-z0-9])\\.management\\.azure-api\\.net`)                                        // https://azure.github.io/PSRule.Rules.Azure/en/rules/Azure.APIM.Name/\n\tkeyPat        = regexp.MustCompile(detectors.PrefixRegex([]string{\"azure\", \".management.azure-api.net\"}) + `([a-zA-Z0-9+\\/]{83,85}[a-zA-Z0-9]==)`) // pattern for both Primary and secondary key\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "\\bhttps:\\/\\/([a-zA-Z0-9-]{2,30})\\.azurewebsites\\.net\\/api\\/([a-zA-Z0-9-]{2,30})\\b",
      "detector_name": "azurefunctionkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\azurefunctionkey\\azurefunctionkey.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat      = regexp.MustCompile(detectors.PrefixRegex([]string{\"azure\"}) + `\\b([a-zA-Z0-9_-]{20,56})\\b={0,2}`)\n\tazureUrlPat = regexp.MustCompile(`\\bhttps:\\/\\/([a-zA-Z0-9-]{2,30})\\.azurewebsites\\.net\\/api\\/([a-zA-Z0-9-]{2,30})\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bhttps:\\/\\/([a-zA-Z0-9-]{2,30})\\.azurewebsites\\.net\\/api\\/([a-zA-Z0-9-]{2,30})\\b",
      "detector_name": "azurefunctionkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\azurefunctionkey\\azurefunctionkey.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat      = regexp.MustCompile(detectors.PrefixRegex([]string{\"azure\"}) + `\\b([a-zA-Z0-9_-]{20,56})\\b={0,2}`)\n\tazureUrlPat = regexp.MustCompile(`\\bhttps:\\/\\/([a-zA-Z0-9-]{2,30})\\.azurewebsites\\.net\\/api\\/([a-zA-Z0-9-]{2,30})\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "azureUrlPat"
    },
    {
      "pattern": "https://([a-zA-Z0-9][a-z0-9_-]{1,22}[a-zA-Z0-9])\\.blob\\.core\\.windows\\.net/[a-z0-9]([a-z0-9-]{1,61}[a-z0-9])?(?:/[a-zA-Z0-9._-]+)*",
      "detector_name": "azuresastoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\azuresastoken\\azuresastoken.go",
      "line_number": 32,
      "context": "\n\t// microsoft storage resource naming rules: https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage:~:text=format%3A%0AVaultName_KeyName_KeyVersion.-,Microsoft.Storage,-Expand%20table\n\turlPat = regexp.MustCompile(`https://([a-zA-Z0-9][a-z0-9_-]{1,22}[a-zA-Z0-9])\\.blob\\.core\\.windows\\.net/[a-z0-9]([a-z0-9-]{1,61}[a-z0-9])?(?:/[a-zA-Z0-9._-]+)*`)\n\n\tkeyPat = regexp.MustCompile(",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "https://([a-zA-Z0-9][a-z0-9_-]{1,22}[a-zA-Z0-9])\\.blob\\.core\\.windows\\.net/[a-z0-9]([a-z0-9-]{1,61}[a-z0-9])?(?:/[a-zA-Z0-9._-]+)*",
      "detector_name": "azuresastoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\azuresastoken\\azuresastoken.go",
      "line_number": 32,
      "context": "\n\t// microsoft storage resource naming rules: https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage:~:text=format%3A%0AVaultName_KeyName_KeyVersion.-,Microsoft.Storage,-Expand%20table\n\turlPat = regexp.MustCompile(`https://([a-zA-Z0-9][a-z0-9_-]{1,22}[a-zA-Z0-9])\\.blob\\.core\\.windows\\.net/[a-z0-9]([a-z0-9-]{1,61}[a-z0-9])?(?:/[a-zA-Z0-9._-]+)*`)\n\n\tkeyPat = regexp.MustCompile(",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "https://(.{1,50})\\.(.{1,50})\\.batch\\.azure\\.com",
      "detector_name": "azure_batch",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_batch\\azurebatch.go",
      "line_number": 31,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\turlPat    = regexp.MustCompile(`https://(.{1,50})\\.(.{1,50})\\.batch\\.azure\\.com`)\n\tsecretPat = regexp.MustCompile(`[A-Za-z0-9+/=]{88}`)\n)",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "https://(.{1,50})\\.(.{1,50})\\.batch\\.azure\\.com",
      "detector_name": "azure_batch",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_batch\\azurebatch.go",
      "line_number": 31,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\turlPat    = regexp.MustCompile(`https://(.{1,50})\\.(.{1,50})\\.batch\\.azure\\.com`)\n\tsecretPat = regexp.MustCompile(`[A-Za-z0-9+/=]{88}`)\n)",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "[A-Za-z0-9+/=]{88}",
      "detector_name": "azure_batch",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_batch\\azurebatch.go",
      "line_number": 32,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\turlPat    = regexp.MustCompile(`https://(.{1,50})\\.(.{1,50})\\.batch\\.azure\\.com`)\n\tsecretPat = regexp.MustCompile(`[A-Za-z0-9+/=]{88}`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "[A-Za-z0-9+/=]{88}",
      "detector_name": "azure_batch",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_batch\\azurebatch.go",
      "line_number": 32,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\turlPat    = regexp.MustCompile(`https://(.{1,50})\\.(.{1,50})\\.batch\\.azure\\.com`)\n\tsecretPat = regexp.MustCompile(`[A-Za-z0-9+/=]{88}`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "secretPat"
    },
    {
      "pattern": "([A-Za-z0-9]{86}==)",
      "detector_name": "azure_cosmosdb",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_cosmosdb\\azure_cosmosdb.go",
      "line_number": 30,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tdbKeyPattern = regexp.MustCompile(`([A-Za-z0-9]{86}==)`)\n\t// account name can contain only lowercase letters, numbers and the `-` character, must be between 3 and 44 characters long.\n\taccountUrlPattern = regexp.MustCompile(`([a-z0-9-]{3,44}\\.(?:documents|table\\.cosmos)\\.azure\\.com)`)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "([A-Za-z0-9]{86}==)",
      "detector_name": "azure_cosmosdb",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_cosmosdb\\azure_cosmosdb.go",
      "line_number": 30,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tdbKeyPattern = regexp.MustCompile(`([A-Za-z0-9]{86}==)`)\n\t// account name can contain only lowercase letters, numbers and the `-` character, must be between 3 and 44 characters long.\n\taccountUrlPattern = regexp.MustCompile(`([a-z0-9-]{3,44}\\.(?:documents|table\\.cosmos)\\.azure\\.com)`)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "dbKeyPattern"
    },
    {
      "pattern": "([a-z0-9-]{3,44}\\.(?:documents|table\\.cosmos)\\.azure\\.com)",
      "detector_name": "azure_cosmosdb",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_cosmosdb\\azure_cosmosdb.go",
      "line_number": 32,
      "context": "\tdbKeyPattern = regexp.MustCompile(`([A-Za-z0-9]{86}==)`)\n\t// account name can contain only lowercase letters, numbers and the `-` character, must be between 3 and 44 characters long.\n\taccountUrlPattern = regexp.MustCompile(`([a-z0-9-]{3,44}\\.(?:documents|table\\.cosmos)\\.azure\\.com)`)\n\n\tinvalidHosts = simple.NewCache[struct{}]()",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "([a-z0-9-]{3,44}\\.(?:documents|table\\.cosmos)\\.azure\\.com)",
      "detector_name": "azure_cosmosdb",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_cosmosdb\\azure_cosmosdb.go",
      "line_number": 32,
      "context": "\tdbKeyPattern = regexp.MustCompile(`([A-Za-z0-9]{86}==)`)\n\t// account name can contain only lowercase letters, numbers and the `-` character, must be between 3 and 44 characters long.\n\taccountUrlPattern = regexp.MustCompile(`([a-z0-9-]{3,44}\\.(?:documents|table\\.cosmos)\\.azure\\.com)`)\n\n\tinvalidHosts = simple.NewCache[struct{}]()",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "accountUrlPattern"
    },
    {
      "pattern": "([\\w-]+\\.onmicrosoft\\.com)",
      "detector_name": "azure_entra",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_entra\\common.go",
      "line_number": 33,
      "context": "\t\tuuidStr,\n\t))\n\ttenantOnMicrosoftPat = regexp.MustCompile(`([\\w-]+\\.onmicrosoft\\.com)`)\n\n\tclientIdPat = regexp.MustCompile(fmt.Sprintf(",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "([\\w-]+\\.onmicrosoft\\.com)",
      "detector_name": "azure_entra",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_entra\\common.go",
      "line_number": 33,
      "context": "\t\tuuidStr,\n\t))\n\ttenantOnMicrosoftPat = regexp.MustCompile(`([\\w-]+\\.onmicrosoft\\.com)`)\n\n\tclientIdPat = regexp.MustCompile(fmt.Sprintf(",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "tenantOnMicrosoftPat"
    },
    {
      "pattern": "\\b[01]\\.A[\\w-]{50,}(?:\\.\\d)?\\.Ag[\\w-]{250,}(?:\\.A[\\w-]{200,})?",
      "detector_name": "refreshtoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_entra\\refreshtoken\\refreshtoken.go",
      "line_number": 39,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\trefreshTokenPat = regexp.MustCompile(`\\b[01]\\.A[\\w-]{50,}(?:\\.\\d)?\\.Ag[\\w-]{250,}(?:\\.A[\\w-]{200,})?`)\n)\n",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b[01]\\.A[\\w-]{50,}(?:\\.\\d)?\\.Ag[\\w-]{250,}(?:\\.A[\\w-]{200,})?",
      "detector_name": "refreshtoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_entra\\refreshtoken\\refreshtoken.go",
      "line_number": 39,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\trefreshTokenPat = regexp.MustCompile(`\\b[01]\\.A[\\w-]{50,}(?:\\.\\d)?\\.Ag[\\w-]{250,}(?:\\.A[\\w-]{200,})?`)\n)\n",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": "refreshTokenPat"
    },
    {
      "pattern": "(?i)(?:secret|password| -p[ =]).{0,80}[^A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]([A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]{31,34})[^A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]",
      "detector_name": "v1",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_entra\\serviceprincipal\\v1\\spv1.go",
      "line_number": 35,
      "context": "\t//clientSecretPat = regexp.MustCompile(`(?i)(?:secret|password| -p[ =]).{0,80}?([\\w~@[\\]:.?*/+=-]{31,34}`)\n\t// TODO: Tighten this regex and replace it with above.\n\tsecretPat = regexp.MustCompile(`(?i)(?:secret|password| -p[ =]).{0,80}[^A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]([A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]{31,34})[^A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)(?:secret|password| -p[ =]).{0,80}[^A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]([A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]{31,34})[^A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]",
      "detector_name": "v1",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_entra\\serviceprincipal\\v1\\spv1.go",
      "line_number": 35,
      "context": "\t//clientSecretPat = regexp.MustCompile(`(?i)(?:secret|password| -p[ =]).{0,80}?([\\w~@[\\]:.?*/+=-]{31,34}`)\n\t// TODO: Tighten this regex and replace it with above.\n\tsecretPat = regexp.MustCompile(`(?i)(?:secret|password| -p[ =]).{0,80}[^A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]([A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]{31,34})[^A-Za-z0-9!#$%&()*+,\\-./:;<=>?@[\\\\\\]^_{|}~]`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "secretPat"
    },
    {
      "pattern": "(?:[^a-zA-Z0-9_~.-]|\\A)([a-zA-Z0-9_~.-]{3}\\dQ~[a-zA-Z0-9_~.-]{31,34})(?:[^a-zA-Z0-9_~.-]|\\z)",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_entra\\serviceprincipal\\v2\\spv2.go",
      "line_number": 32,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tSecretPat = regexp.MustCompile(`(?:[^a-zA-Z0-9_~.-]|\\A)([a-zA-Z0-9_~.-]{3}\\dQ~[a-zA-Z0-9_~.-]{31,34})(?:[^a-zA-Z0-9_~.-]|\\z)`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?:[^a-zA-Z0-9_~.-]|\\A)([a-zA-Z0-9_~.-]{3}\\dQ~[a-zA-Z0-9_~.-]{31,34})(?:[^a-zA-Z0-9_~.-]|\\z)",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_entra\\serviceprincipal\\v2\\spv2.go",
      "line_number": 32,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tSecretPat = regexp.MustCompile(`(?:[^a-zA-Z0-9_~.-]|\\A)([a-zA-Z0-9_~.-]{3}\\dQ~[a-zA-Z0-9_~.-]{31,34})(?:[^a-zA-Z0-9_~.-]|\\z)`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "SecretPat"
    },
    {
      "pattern": "(?i)([a-z0-9-]+\\.openai\\.azure\\.com)",
      "detector_name": "azure_openai",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_openai\\azure_openai.go",
      "line_number": 33,
      "context": "\t// TODO: Investigate custom `azure-api.net` endpoints.\n\t// https://github.com/openai/openai-python#microsoft-azure-openai\n\tazureUrlPat = regexp.MustCompile(`(?i)([a-z0-9-]+\\.openai\\.azure\\.com)`)\n\tazureKeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"api[_.-]?key\", \"openai[_.-]?key\"}) + `\\b(?-i:([a-f0-9]{32}))\\b`)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)([a-z0-9-]+\\.openai\\.azure\\.com)",
      "detector_name": "azure_openai",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_openai\\azure_openai.go",
      "line_number": 33,
      "context": "\t// TODO: Investigate custom `azure-api.net` endpoints.\n\t// https://github.com/openai/openai-python#microsoft-azure-openai\n\tazureUrlPat = regexp.MustCompile(`(?i)([a-z0-9-]+\\.openai\\.azure\\.com)`)\n\tazureKeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"api[_.-]?key\", \"openai[_.-]?key\"}) + `\\b(?-i:([a-f0-9]{32}))\\b`)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "azureUrlPat"
    },
    {
      "pattern": "(?i:Account[_.-]?Name|Storage[_.-]?(?:Account|Name))(?:.|\\s){0,20}?\\b([a-z0-9]{3,24})\\b|([a-z0-9]{3,24})(?i:\\.blob\\.core\\.windows\\.net)",
      "detector_name": "azure_storage",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_storage\\storage.go",
      "line_number": 31,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\n\tnamePat = regexp.MustCompile(`(?i:Account[_.-]?Name|Storage[_.-]?(?:Account|Name))(?:.|\\s){0,20}?\\b([a-z0-9]{3,24})\\b|([a-z0-9]{3,24})(?i:\\.blob\\.core\\.windows\\.net)`) // Names can only be lowercase alphanumeric.\n\tkeyPat  = regexp.MustCompile(`(?i:(?:Access|Account|Storage)[_.-]?Key)(?:.|\\s){0,25}?([a-zA-Z0-9+\\/-]{86,88}={0,2})`)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i:Account[_.-]?Name|Storage[_.-]?(?:Account|Name))(?:.|\\s){0,20}?\\b([a-z0-9]{3,24})\\b|([a-z0-9]{3,24})(?i:\\.blob\\.core\\.windows\\.net)",
      "detector_name": "azure_storage",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_storage\\storage.go",
      "line_number": 31,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\n\tnamePat = regexp.MustCompile(`(?i:Account[_.-]?Name|Storage[_.-]?(?:Account|Name))(?:.|\\s){0,20}?\\b([a-z0-9]{3,24})\\b|([a-z0-9]{3,24})(?i:\\.blob\\.core\\.windows\\.net)`) // Names can only be lowercase alphanumeric.\n\tkeyPat  = regexp.MustCompile(`(?i:(?:Access|Account|Storage)[_.-]?Key)(?:.|\\s){0,25}?([a-zA-Z0-9+\\/-]{86,88}={0,2})`)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "namePat"
    },
    {
      "pattern": "(?i:(?:Access|Account|Storage)[_.-]?Key)(?:.|\\s){0,25}?([a-zA-Z0-9+\\/-]{86,88}={0,2})",
      "detector_name": "azure_storage",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_storage\\storage.go",
      "line_number": 32,
      "context": "\n\tnamePat = regexp.MustCompile(`(?i:Account[_.-]?Name|Storage[_.-]?(?:Account|Name))(?:.|\\s){0,20}?\\b([a-z0-9]{3,24})\\b|([a-z0-9]{3,24})(?i:\\.blob\\.core\\.windows\\.net)`) // Names can only be lowercase alphanumeric.\n\tkeyPat  = regexp.MustCompile(`(?i:(?:Access|Account|Storage)[_.-]?Key)(?:.|\\s){0,25}?([a-zA-Z0-9+\\/-]{86,88}={0,2})`)\n\n\t// https://learn.microsoft.com/en-us/azure/storage/common/storage-use-emulator",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i:(?:Access|Account|Storage)[_.-]?Key)(?:.|\\s){0,25}?([a-zA-Z0-9+\\/-]{86,88}={0,2})",
      "detector_name": "azure_storage",
      "file_path": "trufflehog-main\\pkg\\detectors\\azure_storage\\storage.go",
      "line_number": 32,
      "context": "\n\tnamePat = regexp.MustCompile(`(?i:Account[_.-]?Name|Storage[_.-]?(?:Account|Name))(?:.|\\s){0,20}?\\b([a-z0-9]{3,24})\\b|([a-z0-9]{3,24})(?i:\\.blob\\.core\\.windows\\.net)`) // Names can only be lowercase alphanumeric.\n\tkeyPat  = regexp.MustCompile(`(?i:(?:Access|Account|Storage)[_.-]?Key)(?:.|\\s){0,25}?([a-zA-Z0-9+\\/-]{86,88}={0,2})`)\n\n\t// https://learn.microsoft.com/en-us/azure/storage/common/storage-use-emulator",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(bb_(?:pr|ma)_[a-f0-9]{30})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\bannerbear\\v2\\bannerbear.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(bb_(?:pr|ma)_[a-f0-9]{30})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(bb_(?:pr|ma)_[a-f0-9]{30})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\bannerbear\\v2\\bannerbear.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(bb_(?:pr|ma)_[a-f0-9]{30})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(?:^|[^A-Za-z0-9-_])(?P<username>[A-Za-z0-9-_]{1,30}):(?P<password>ATBB[A-Za-z0-9_=.-]+)\\b",
      "detector_name": "bitbucketapppassword",
      "file_path": "trufflehog-main\\pkg\\detectors\\bitbucketapppassword\\bitbucketapppassword.go",
      "line_number": 47,
      "context": "\tcredentialPatterns = []*regexp.Regexp{\n\t\t// Explicitly define the boundary as (start of string) or (a non-username character).\n\t\tregexp.MustCompile(`(?:^|[^A-Za-z0-9-_])(?P<username>[A-Za-z0-9-_]{1,30}):(?P<password>ATBB[A-Za-z0-9_=.-]+)\\b`),\n\t\t// Catches 'https://username:password@bitbucket.org' pattern\n\t\tregexp.MustCompile(`https://(?P<username>[A-Za-z0-9-_]{1,30}):(?P<password>ATBB[A-Za-z0-9_=.-]+)@bitbucket\\.org`),",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "https://(?P<username>[A-Za-z0-9-_]{1,30}):(?P<password>ATBB[A-Za-z0-9_=.-]+)@bitbucket\\.org",
      "detector_name": "bitbucketapppassword",
      "file_path": "trufflehog-main\\pkg\\detectors\\bitbucketapppassword\\bitbucketapppassword.go",
      "line_number": 49,
      "context": "\t\tregexp.MustCompile(`(?:^|[^A-Za-z0-9-_])(?P<username>[A-Za-z0-9-_]{1,30}):(?P<password>ATBB[A-Za-z0-9_=.-]+)\\b`),\n\t\t// Catches 'https://username:password@bitbucket.org' pattern\n\t\tregexp.MustCompile(`https://(?P<username>[A-Za-z0-9-_]{1,30}):(?P<password>ATBB[A-Za-z0-9_=.-]+)@bitbucket\\.org`),\n\t\t// Catches '(\"username\", \"password\")' pattern, used for HTTP Basic Auth\n\t\tregexp.MustCompile(`\"(?P<username>[A-Za-z0-9-_]{1,30})\",\\s*\"(?P<password>ATBB[A-Za-z0-9_=.-]+)\"`),",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\"(?P<username>[A-Za-z0-9-_]{1,30})\",\\s*\"(?P<password>ATBB[A-Za-z0-9_=.-]+)\"",
      "detector_name": "bitbucketapppassword",
      "file_path": "trufflehog-main\\pkg\\detectors\\bitbucketapppassword\\bitbucketapppassword.go",
      "line_number": 51,
      "context": "\t\tregexp.MustCompile(`https://(?P<username>[A-Za-z0-9-_]{1,30}):(?P<password>ATBB[A-Za-z0-9_=.-]+)@bitbucket\\.org`),\n\t\t// Catches '(\"username\", \"password\")' pattern, used for HTTP Basic Auth\n\t\tregexp.MustCompile(`\"(?P<username>[A-Za-z0-9-_]{1,30})\",\\s*\"(?P<password>ATBB[A-Za-z0-9_=.-]+)\"`),\n\t}\n)",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(bkua_[a-z0-9]{40})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\buildkite\\v2\\buildkite.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(bkua_[a-z0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(bkua_[a-z0-9]{40})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\buildkite\\v2\\buildkite.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(bkua_[a-z0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(eyJhbGciOiJIUzI1NiJ9[a-zA-Z0-9._-]{135})\\b",
      "detector_name": "caflou",
      "file_path": "trufflehog-main\\pkg\\detectors\\caflou\\caflou.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(eyJhbGciOiJIUzI1NiJ9[a-zA-Z0-9._-]{135})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(eyJhbGciOiJIUzI1NiJ9[a-zA-Z0-9._-]{135})\\b",
      "detector_name": "caflou",
      "file_path": "trufflehog-main\\pkg\\detectors\\caflou\\caflou.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(eyJhbGciOiJIUzI1NiJ9[a-zA-Z0-9._-]{135})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(CCIPAT_[a-zA-Z0-9]{22}_[a-fA-F0-9]{40})",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\circleci\\v2\\circleci.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`(CCIPAT_[a-zA-Z0-9]{22}_[a-fA-F0-9]{40})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(CCIPAT_[a-zA-Z0-9]{22}_[a-fA-F0-9]{40})",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\circleci\\v2\\circleci.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`(CCIPAT_[a-zA-Z0-9]{22}_[a-fA-F0-9]{40})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([0-9A-Za-z-]{3,20}\\.(?:try\\.)?clickhelp\\.co)\\b",
      "detector_name": "clickhelp",
      "file_path": "trufflehog-main\\pkg\\detectors\\clickhelp\\clickhelp.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tportalPat = regexp.MustCompile(`\\b([0-9A-Za-z-]{3,20}\\.(?:try\\.)?clickhelp\\.co)\\b`)\n\temailPat  = regexp.MustCompile(common.EmailPattern)\n\tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"clickhelp\", \"key\", \"token\", \"api\", \"secret\"}) + `\\b([0-9A-Za-z]{24})\\b`)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([0-9A-Za-z-]{3,20}\\.(?:try\\.)?clickhelp\\.co)\\b",
      "detector_name": "clickhelp",
      "file_path": "trufflehog-main\\pkg\\detectors\\clickhelp\\clickhelp.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tportalPat = regexp.MustCompile(`\\b([0-9A-Za-z-]{3,20}\\.(?:try\\.)?clickhelp\\.co)\\b`)\n\temailPat  = regexp.MustCompile(common.EmailPattern)\n\tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"clickhelp\", \"key\", \"token\", \"api\", \"secret\"}) + `\\b([0-9A-Za-z]{24})\\b`)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "portalPat"
    },
    {
      "pattern": "\\b(api_[a-z0-9A-Z.]{45})\\b",
      "detector_name": "closecrm",
      "file_path": "trufflehog-main\\pkg\\detectors\\closecrm\\close.go",
      "line_number": 26,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(api_[a-z0-9A-Z.]{45})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(api_[a-z0-9A-Z.]{45})\\b",
      "detector_name": "closecrm",
      "file_path": "trufflehog-main\\pkg\\detectors\\closecrm\\close.go",
      "line_number": 26,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(api_[a-z0-9A-Z.]{45})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(v1\\.0-[A-Za-z0-9-]{171})\\b",
      "detector_name": "cloudflarecakey",
      "file_path": "trufflehog-main\\pkg\\detectors\\cloudflarecakey\\cloudflarecakey.go",
      "line_number": 25,
      "context": "\n\t// origin ca keys documentation: https://developers.cloudflare.com/fundamentals/api/get-started/ca-keys/\n\tkeyPat = regexp.MustCompile(`\\b(v1\\.0-[A-Za-z0-9-]{171})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(v1\\.0-[A-Za-z0-9-]{171})\\b",
      "detector_name": "cloudflarecakey",
      "file_path": "trufflehog-main\\pkg\\detectors\\cloudflarecakey\\cloudflarecakey.go",
      "line_number": 25,
      "context": "\n\t// origin ca keys documentation: https://developers.cloudflare.com/fundamentals/api/get-started/ca-keys/\n\tkeyPat = regexp.MustCompile(`\\b(v1\\.0-[A-Za-z0-9-]{171})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(organizations\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}\\\\*/apiKeys\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\b",
      "detector_name": "coinbase",
      "file_path": "trufflehog-main\\pkg\\detectors\\coinbase\\coinbase.go",
      "line_number": 35,
      "context": "\n\t// Reference: https://docs.cdp.coinbase.com/coinbase-app/docs/auth/api-key-authentication\n\tkeyNamePat    = regexp.MustCompile(`\\b(organizations\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}\\\\*/apiKeys\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\b`)\n\tprivateKeyPat = regexp.MustCompile(`(-----BEGIN EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)(?:[a-zA-Z0-9+/]+={0,2}(?:\\r|\\n|\\\\+r|\\\\+n))+-----END EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)?)`)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(organizations\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}\\\\*/apiKeys\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\b",
      "detector_name": "coinbase",
      "file_path": "trufflehog-main\\pkg\\detectors\\coinbase\\coinbase.go",
      "line_number": 35,
      "context": "\n\t// Reference: https://docs.cdp.coinbase.com/coinbase-app/docs/auth/api-key-authentication\n\tkeyNamePat    = regexp.MustCompile(`\\b(organizations\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}\\\\*/apiKeys\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\b`)\n\tprivateKeyPat = regexp.MustCompile(`(-----BEGIN EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)(?:[a-zA-Z0-9+/]+={0,2}(?:\\r|\\n|\\\\+r|\\\\+n))+-----END EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)?)`)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyNamePat"
    },
    {
      "pattern": "(-----BEGIN EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)(?:[a-zA-Z0-9+/]+={0,2}(?:\\r|\\n|\\\\+r|\\\\+n))+-----END EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)?)",
      "detector_name": "coinbase",
      "file_path": "trufflehog-main\\pkg\\detectors\\coinbase\\coinbase.go",
      "line_number": 36,
      "context": "\t// Reference: https://docs.cdp.coinbase.com/coinbase-app/docs/auth/api-key-authentication\n\tkeyNamePat    = regexp.MustCompile(`\\b(organizations\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}\\\\*/apiKeys\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\b`)\n\tprivateKeyPat = regexp.MustCompile(`(-----BEGIN EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)(?:[a-zA-Z0-9+/]+={0,2}(?:\\r|\\n|\\\\+r|\\\\+n))+-----END EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)?)`)\n\n\tapiHost              = \"api.coinbase.com\"",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(-----BEGIN EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)(?:[a-zA-Z0-9+/]+={0,2}(?:\\r|\\n|\\\\+r|\\\\+n))+-----END EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)?)",
      "detector_name": "coinbase",
      "file_path": "trufflehog-main\\pkg\\detectors\\coinbase\\coinbase.go",
      "line_number": 36,
      "context": "\t// Reference: https://docs.cdp.coinbase.com/coinbase-app/docs/auth/api-key-authentication\n\tkeyNamePat    = regexp.MustCompile(`\\b(organizations\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}\\\\*/apiKeys\\\\*/\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\b`)\n\tprivateKeyPat = regexp.MustCompile(`(-----BEGIN EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)(?:[a-zA-Z0-9+/]+={0,2}(?:\\r|\\n|\\\\+r|\\\\+n))+-----END EC(?:DSA)? PRIVATE KEY-----(?:\\r|\\n|\\\\+r|\\\\+n)?)`)\n\n\tapiHost              = \"api.coinbase.com\"",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "privateKeyPat"
    },
    {
      "pattern": "\\b(CFPAT-[a-zA-Z0-9_\\-]{43})\\b",
      "detector_name": "contentfulpersonalaccesstoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\contentfulpersonalaccesstoken\\contentfulpersonalaccesstoken.go",
      "line_number": 23,
      "context": "var (\n\tclient = common.SaneHttpClient()\n\tkeyPat = regexp.MustCompile(`\\b(CFPAT-[a-zA-Z0-9_\\-]{43})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(CFPAT-[a-zA-Z0-9_\\-]{43})\\b",
      "detector_name": "contentfulpersonalaccesstoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\contentfulpersonalaccesstoken\\contentfulpersonalaccesstoken.go",
      "line_number": 23,
      "context": "var (\n\tclient = common.SaneHttpClient()\n\tkeyPat = regexp.MustCompile(`\\b(CFPAT-[a-zA-Z0-9_\\-]{43})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(cb\\.[a-z0-9]+\\.cloud\\.couchbase\\.com)\\b",
      "detector_name": "couchbase",
      "file_path": "trufflehog-main\\pkg\\detectors\\couchbase\\couchbase.go",
      "line_number": 26,
      "context": "var (\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tconnectionStringPat = regexp.MustCompile(`\\b(cb\\.[a-z0-9]+\\.cloud\\.couchbase\\.com)\\b`)\n\tusernamePat         = common.UsernameRegexCheck(`?()/\\+=\\s\\n`)\n\tpasswordPat         = common.PasswordRegexCheck(`^<>;.*&|£\\n\\s`)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(cb\\.[a-z0-9]+\\.cloud\\.couchbase\\.com)\\b",
      "detector_name": "couchbase",
      "file_path": "trufflehog-main\\pkg\\detectors\\couchbase\\couchbase.go",
      "line_number": 26,
      "context": "var (\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tconnectionStringPat = regexp.MustCompile(`\\b(cb\\.[a-z0-9]+\\.cloud\\.couchbase\\.com)\\b`)\n\tusernamePat         = common.UsernameRegexCheck(`?()/\\+=\\s\\n`)\n\tpasswordPat         = common.PasswordRegexCheck(`^<>;.*&|£\\n\\s`)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "connectionStringPat"
    },
    {
      "pattern": "\\b([a-z0-9-]+(?:\\.[a-z0-9-]+)*\\.(cloud\\.databricks\\.com|gcp\\.databricks\\.com|azuredatabricks\\.net))\\b",
      "detector_name": "databrickstoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\databrickstoken\\databrickstoken.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tdomain = regexp.MustCompile(`\\b([a-z0-9-]+(?:\\.[a-z0-9-]+)*\\.(cloud\\.databricks\\.com|gcp\\.databricks\\.com|azuredatabricks\\.net))\\b`)\n\tkeyPat = regexp.MustCompile(`\\b(dapi[0-9a-f]{32}(-\\d)?)\\b`)\n)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(dapi[0-9a-f]{32}(-\\d)?)\\b",
      "detector_name": "databrickstoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\databrickstoken\\databrickstoken.go",
      "line_number": 29,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tdomain = regexp.MustCompile(`\\b([a-z0-9-]+(?:\\.[a-z0-9-]+)*\\.(cloud\\.databricks\\.com|gcp\\.databricks\\.com|azuredatabricks\\.net))\\b`)\n\tkeyPat = regexp.MustCompile(`\\b(dapi[0-9a-f]{32}(-\\d)?)\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(dapi[0-9a-f]{32}(-\\d)?)\\b",
      "detector_name": "databrickstoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\databrickstoken\\databrickstoken.go",
      "line_number": 29,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tdomain = regexp.MustCompile(`\\b([a-z0-9-]+(?:\\.[a-z0-9-]+)*\\.(cloud\\.databricks\\.com|gcp\\.databricks\\.com|azuredatabricks\\.net))\\b`)\n\tkeyPat = regexp.MustCompile(`\\b(dapi[0-9a-f]{32}(-\\d)?)\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(dd[pw]_[a-zA-Z0-9]{36})\\b",
      "detector_name": "deno",
      "file_path": "trufflehog-main\\pkg\\detectors\\deno\\denodeploy.go",
      "line_number": 26,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\ttokenPat      = regexp.MustCompile(`\\b(dd[pw]_[a-zA-Z0-9]{36})\\b`)\n)\n",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(dd[pw]_[a-zA-Z0-9]{36})\\b",
      "detector_name": "deno",
      "file_path": "trufflehog-main\\pkg\\detectors\\deno\\denodeploy.go",
      "line_number": 26,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\ttokenPat      = regexp.MustCompile(`\\b(dd[pw]_[a-zA-Z0-9]{36})\\b`)\n)\n",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": "tokenPat"
    },
    {
      "pattern": "\\b([0-9a-z]{1,}\\.as\\.deputy\\.com)\\b",
      "detector_name": "deputy",
      "file_path": "trufflehog-main\\pkg\\detectors\\deputy\\deputy.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"deputy\"}) + `\\b([0-9a-z]{32})\\b`)\n\turlPat = regexp.MustCompile(`\\b([0-9a-z]{1,}\\.as\\.deputy\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([0-9a-z]{1,}\\.as\\.deputy\\.com)\\b",
      "detector_name": "deputy",
      "file_path": "trufflehog-main\\pkg\\detectors\\deputy\\deputy.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"deputy\"}) + `\\b([0-9a-z]{32})\\b`)\n\turlPat = regexp.MustCompile(`\\b([0-9a-z]{1,}\\.as\\.deputy\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "\\b(web\\_[0-9a-z]{32})\\b",
      "detector_name": "dfuse",
      "file_path": "trufflehog-main\\pkg\\detectors\\dfuse\\dfuse.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(web\\_[0-9a-z]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(web\\_[0-9a-z]{32})\\b",
      "detector_name": "dfuse",
      "file_path": "trufflehog-main\\pkg\\detectors\\dfuse\\dfuse.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(web\\_[0-9a-z]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b((?:dop|doo|dor)_v1_[a-f0-9]{64})\\b",
      "detector_name": "digitaloceanv2",
      "file_path": "trufflehog-main\\pkg\\detectors\\digitaloceanv2\\digitaloceanv2.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b((?:dop|doo|dor)_v1_[a-f0-9]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b((?:dop|doo|dor)_v1_[a-f0-9]{64})\\b",
      "detector_name": "digitaloceanv2",
      "file_path": "trufflehog-main\\pkg\\detectors\\digitaloceanv2\\digitaloceanv2.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b((?:dop|doo|dor)_v1_[a-f0-9]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(https:\\/\\/discord\\.com\\/api\\/webhooks\\/[0-9]{18,19}\\/[0-9a-zA-Z-]{68})",
      "detector_name": "discordwebhook",
      "file_path": "trufflehog-main\\pkg\\detectors\\discordwebhook\\discordwebhook.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(https:\\/\\/discord\\.com\\/api\\/webhooks\\/[0-9]{18,19}\\/[0-9a-zA-Z-]{68})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(https:\\/\\/discord\\.com\\/api\\/webhooks\\/[0-9]{18,19}\\/[0-9a-zA-Z-]{68})",
      "detector_name": "discordwebhook",
      "file_path": "trufflehog-main\\pkg\\detectors\\discordwebhook\\discordwebhook.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(https:\\/\\/discord\\.com\\/api\\/webhooks\\/[0-9]{18,19}\\/[0-9a-zA-Z-]{68})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "{(?:\\s|\\\\+[nrt])*\\\\*\"auths\\\\*\"(?:\\s|\\\\+t)*:(?:\\s|\\\\+t)*{(?:\\s|\\\\+[nrt])*\\\\*\"(?i:https?:\\/\\/)?[a-z0-9\\-.:\\/]+\\\\*\"(?:\\s|\\\\+t)*:(?:\\s|\\\\+t)*{(?:(?:\\s|\\\\+[nrt])*\\\\*\"(?i:auth|email|username|password)\\\\*\"\\s*:\\s*\\\\*\".*\\\\*\"\\s*,?)+?(?:\\s|\\\\+[nrt])*}(?:\\s|\\\\+[nrt])*}(?:\\s|\\\\+[nrt])*}",
      "detector_name": "docker",
      "file_path": "trufflehog-main\\pkg\\detectors\\docker\\docker_auth_config.go",
      "line_number": 51,
      "context": "\nvar (\n\tkeyPat          = regexp.MustCompile(`{(?:\\s|\\\\+[nrt])*\\\\*\"auths\\\\*\"(?:\\s|\\\\+t)*:(?:\\s|\\\\+t)*{(?:\\s|\\\\+[nrt])*\\\\*\"(?i:https?:\\/\\/)?[a-z0-9\\-.:\\/]+\\\\*\"(?:\\s|\\\\+t)*:(?:\\s|\\\\+t)*{(?:(?:\\s|\\\\+[nrt])*\\\\*\"(?i:auth|email|username|password)\\\\*\"\\s*:\\s*\\\\*\".*\\\\*\"\\s*,?)+?(?:\\s|\\\\+[nrt])*}(?:\\s|\\\\+[nrt])*}(?:\\s|\\\\+[nrt])*}`)\n\tescapedReplacer = strings.NewReplacer(\n\t\t`\\n`, \"\",",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "{(?:\\s|\\\\+[nrt])*\\\\*\"auths\\\\*\"(?:\\s|\\\\+t)*:(?:\\s|\\\\+t)*{(?:\\s|\\\\+[nrt])*\\\\*\"(?i:https?:\\/\\/)?[a-z0-9\\-.:\\/]+\\\\*\"(?:\\s|\\\\+t)*:(?:\\s|\\\\+t)*{(?:(?:\\s|\\\\+[nrt])*\\\\*\"(?i:auth|email|username|password)\\\\*\"\\s*:\\s*\\\\*\".*\\\\*\"\\s*,?)+?(?:\\s|\\\\+[nrt])*}(?:\\s|\\\\+[nrt])*}(?:\\s|\\\\+[nrt])*}",
      "detector_name": "docker",
      "file_path": "trufflehog-main\\pkg\\detectors\\docker\\docker_auth_config.go",
      "line_number": 51,
      "context": "\nvar (\n\tkeyPat          = regexp.MustCompile(`{(?:\\s|\\\\+[nrt])*\\\\*\"auths\\\\*\"(?:\\s|\\\\+t)*:(?:\\s|\\\\+t)*{(?:\\s|\\\\+[nrt])*\\\\*\"(?i:https?:\\/\\/)?[a-z0-9\\-.:\\/]+\\\\*\"(?:\\s|\\\\+t)*:(?:\\s|\\\\+t)*{(?:(?:\\s|\\\\+[nrt])*\\\\*\"(?i:auth|email|username|password)\\\\*\"\\s*:\\s*\\\\*\".*\\\\*\"\\s*,?)+?(?:\\s|\\\\+[nrt])*}(?:\\s|\\\\+[nrt])*}(?:\\s|\\\\+[nrt])*}`)\n\tescapedReplacer = strings.NewReplacer(\n\t\t`\\n`, \"\",",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(?im)(?:user|usr|-u|id)\\S{0,40}?[:=\\s]{1,3}[ '\"=]?([a-zA-Z0-9]{4,40})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\dockerhub\\v2\\dockerhub.go",
      "line_number": 32,
      "context": "var (\n\t// Can use email or username for login.\n\tusernamePat = regexp.MustCompile(`(?im)(?:user|usr|-u|id)\\S{0,40}?[:=\\s]{1,3}[ '\"=]?([a-zA-Z0-9]{4,40})\\b`)\n\temailPat    = regexp.MustCompile(common.EmailPattern)\n",
      "pattern_type": "usernamePat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?im)(?:user|usr|-u|id)\\S{0,40}?[:=\\s]{1,3}[ '\"=]?([a-zA-Z0-9]{4,40})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\dockerhub\\v2\\dockerhub.go",
      "line_number": 32,
      "context": "var (\n\t// Can use email or username for login.\n\tusernamePat = regexp.MustCompile(`(?im)(?:user|usr|-u|id)\\S{0,40}?[:=\\s]{1,3}[ '\"=]?([a-zA-Z0-9]{4,40})\\b`)\n\temailPat    = regexp.MustCompile(common.EmailPattern)\n",
      "pattern_type": "usernamePat",
      "is_compiled": true,
      "variable_name": "usernamePat"
    },
    {
      "pattern": "\\b(dckr_pat_[a-zA-Z0-9_-]{27}|dckr_oat_[a-zA-Z0-9_-]{32})(?:[^a-zA-Z0-9_-]|\\z)",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\dockerhub\\v2\\dockerhub.go",
      "line_number": 36,
      "context": "\n\t// Can use password or personal/organization access token (PAT/OAT) for login, but this scanner will only check for PATs and OATs.\n\taccessTokenPat = regexp.MustCompile(`\\b(dckr_pat_[a-zA-Z0-9_-]{27}|dckr_oat_[a-zA-Z0-9_-]{32})(?:[^a-zA-Z0-9_-]|\\z)`)\n)\n",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(dckr_pat_[a-zA-Z0-9_-]{27}|dckr_oat_[a-zA-Z0-9_-]{32})(?:[^a-zA-Z0-9_-]|\\z)",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\dockerhub\\v2\\dockerhub.go",
      "line_number": 36,
      "context": "\n\t// Can use password or personal/organization access token (PAT/OAT) for login, but this scanner will only check for PATs and OATs.\n\taccessTokenPat = regexp.MustCompile(`\\b(dckr_pat_[a-zA-Z0-9_-]{27}|dckr_oat_[a-zA-Z0-9_-]{32})(?:[^a-zA-Z0-9_-]|\\z)`)\n)\n",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": "accessTokenPat"
    },
    {
      "pattern": "\\b(ey[a-zA-Z0-9]{34}.ey[a-zA-Z0-9]{154}.[a-zA-Z0-9_-]{43})\\b",
      "detector_name": "documo",
      "file_path": "trufflehog-main\\pkg\\detectors\\documo\\documo.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(ey[a-zA-Z0-9]{34}.ey[a-zA-Z0-9]{154}.[a-zA-Z0-9_-]{43})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(ey[a-zA-Z0-9]{34}.ey[a-zA-Z0-9]{154}.[a-zA-Z0-9_-]{43})\\b",
      "detector_name": "documo",
      "file_path": "trufflehog-main\\pkg\\detectors\\documo\\documo.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(ey[a-zA-Z0-9]{34}.ey[a-zA-Z0-9]{154}.[a-zA-Z0-9_-]{43})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(dp\\.(?:ct|pt|st(?:\\.[a-z0-9\\-_]{2,35})?|sa|scim|audit)\\.[a-zA-Z0-9]{40,44})\\b",
      "detector_name": "doppler",
      "file_path": "trufflehog-main\\pkg\\detectors\\doppler\\doppler.go",
      "line_number": 35,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\t//keyPat = regexp.MustCompile(`\\b(dp\\.pt\\.[a-zA-Z0-9]{43})\\b`)\n\tkeyPat = regexp.MustCompile(`\\b(dp\\.(?:ct|pt|st(?:\\.[a-z0-9\\-_]{2,35})?|sa|scim|audit)\\.[a-zA-Z0-9]{40,44})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(dp\\.(?:ct|pt|st(?:\\.[a-z0-9\\-_]{2,35})?|sa|scim|audit)\\.[a-zA-Z0-9]{40,44})\\b",
      "detector_name": "doppler",
      "file_path": "trufflehog-main\\pkg\\detectors\\doppler\\doppler.go",
      "line_number": 35,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\t//keyPat = regexp.MustCompile(`\\b(dp\\.pt\\.[a-zA-Z0-9]{43})\\b`)\n\tkeyPat = regexp.MustCompile(`\\b(dp\\.(?:ct|pt|st(?:\\.[a-z0-9\\-_]{2,35})?|sa|scim|audit)\\.[a-zA-Z0-9]{40,44})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(?i)(?:elevenlabs|xi-api-key|el|token|key)[^\\.].{0,40}[ =:'\"]+([a-f0-9]{32})\\b",
      "detector_name": "v1",
      "file_path": "trufflehog-main\\pkg\\detectors\\elevenlabs\\v1\\elevenlabs.go",
      "line_number": 36,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(?i)(?:elevenlabs|xi-api-key|el|token|key)[^\\.].{0,40}[ =:'\"]+([a-f0-9]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)(?:elevenlabs|xi-api-key|el|token|key)[^\\.].{0,40}[ =:'\"]+([a-f0-9]{32})\\b",
      "detector_name": "v1",
      "file_path": "trufflehog-main\\pkg\\detectors\\elevenlabs\\v1\\elevenlabs.go",
      "line_number": 36,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(?i)(?:elevenlabs|xi-api-key|el|token|key)[^\\.].{0,40}[ =:'\"]+([a-f0-9]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b((?:sk)_[a-f0-9]{48})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\elevenlabs\\v2\\elevenlabs.go",
      "line_number": 36,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b((?:sk)_[a-f0-9]{48})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b((?:sk)_[a-f0-9]{48})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\elevenlabs\\v2\\elevenlabs.go",
      "line_number": 36,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b((?:sk)_[a-f0-9]{48})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(endr\\+[a-zA-Z0-9-]{16})\\b",
      "detector_name": "endorlabs",
      "file_path": "trufflehog-main\\pkg\\detectors\\endorlabs\\endorlabs.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyAndSecretPat = regexp.MustCompile(`\\b(endr\\+[a-zA-Z0-9-]{16})\\b`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(endr\\+[a-zA-Z0-9-]{16})\\b",
      "detector_name": "endorlabs",
      "file_path": "trufflehog-main\\pkg\\detectors\\endorlabs\\endorlabs.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyAndSecretPat = regexp.MustCompile(`\\b(endr\\+[a-zA-Z0-9-]{16})\\b`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "keyAndSecretPat"
    },
    {
      "pattern": "(?:https?:\\/\\/)?([a-zA-Z0-9-]{1,63})\\.fibery\\.io(?:\\/.*)?",
      "detector_name": "fibery",
      "file_path": "trufflehog-main\\pkg\\detectors\\fibery\\fibery.go",
      "line_number": 29,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"fibery\"}) + `\\b([0-9a-f]{8}\\.[0-9a-f]{35})\\b`)\n\tdomainPat = regexp.MustCompile(`(?:https?:\\/\\/)?([a-zA-Z0-9-]{1,63})\\.fibery\\.io(?:\\/.*)?`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?:https?:\\/\\/)?([a-zA-Z0-9-]{1,63})\\.fibery\\.io(?:\\/.*)?",
      "detector_name": "fibery",
      "file_path": "trufflehog-main\\pkg\\detectors\\fibery\\fibery.go",
      "line_number": 29,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"fibery\"}) + `\\b([0-9a-f]{8}\\.[0-9a-f]{35})\\b`)\n\tdomainPat = regexp.MustCompile(`(?:https?:\\/\\/)?([a-zA-Z0-9-]{1,63})\\.fibery\\.io(?:\\/.*)?`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "domainPat"
    },
    {
      "pattern": "\\b(API_KEY[0-9A-Z]{32})\\b",
      "detector_name": "finage",
      "file_path": "trufflehog-main\\pkg\\detectors\\finage\\finage.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(API_KEY[0-9A-Z]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(API_KEY[0-9A-Z]{32})\\b",
      "detector_name": "finage",
      "file_path": "trufflehog-main\\pkg\\detectors\\finage\\finage.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(API_KEY[0-9A-Z]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(flb_live_[0-9a-zA-Z]{20})\\b",
      "detector_name": "fleetbase",
      "file_path": "trufflehog-main\\pkg\\detectors\\fleetbase\\fleetbase.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(flb_live_[0-9a-zA-Z]{20})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(flb_live_[0-9a-zA-Z]{20})\\b",
      "detector_name": "fleetbase",
      "file_path": "trufflehog-main\\pkg\\detectors\\fleetbase\\fleetbase.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(flb_live_[0-9a-zA-Z]{20})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(shltm_[0-9a-zA-Z-_]{40})",
      "detector_name": "flexport",
      "file_path": "trufflehog-main\\pkg\\detectors\\flexport\\flexport.go",
      "line_number": 26,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(shltm_[0-9a-zA-Z-_]{40})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(shltm_[0-9a-zA-Z-_]{40})",
      "detector_name": "flexport",
      "file_path": "trufflehog-main\\pkg\\detectors\\flexport\\flexport.go",
      "line_number": 26,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(shltm_[0-9a-zA-Z-_]{40})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(FLWSECK-[0-9a-z]{32}-X)\\b",
      "detector_name": "flutterwave",
      "file_path": "trufflehog-main\\pkg\\detectors\\flutterwave\\flutterwave.go",
      "line_number": 26,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\n\tkeyPat = regexp.MustCompile(`\\b(FLWSECK-[0-9a-z]{32}-X)\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(FLWSECK-[0-9a-z]{32}-X)\\b",
      "detector_name": "flutterwave",
      "file_path": "trufflehog-main\\pkg\\detectors\\flutterwave\\flutterwave.go",
      "line_number": 26,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\n\tkeyPat = regexp.MustCompile(`\\b(FLWSECK-[0-9a-z]{32}-X)\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(fio-u-[0-9a-zA-Z_-]{64})\\b",
      "detector_name": "frameio",
      "file_path": "trufflehog-main\\pkg\\detectors\\frameio\\frameio.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(fio-u-[0-9a-zA-Z_-]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(fio-u-[0-9a-zA-Z_-]{64})\\b",
      "detector_name": "frameio",
      "file_path": "trufflehog-main\\pkg\\detectors\\frameio\\frameio.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(fio-u-[0-9a-zA-Z_-]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([0-9a-z-]{1,}\\.freshdesk\\.com)\\b",
      "detector_name": "freshdesk",
      "file_path": "trufflehog-main\\pkg\\detectors\\freshdesk\\freshdesk.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\turlPat = regexp.MustCompile(`\\b([0-9a-z-]{1,}\\.freshdesk\\.com)\\b`)\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"freshdesk\"}) + `\\b([0-9A-Za-z]{20})\\b`)\n)",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([0-9a-z-]{1,}\\.freshdesk\\.com)\\b",
      "detector_name": "freshdesk",
      "file_path": "trufflehog-main\\pkg\\detectors\\freshdesk\\freshdesk.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\turlPat = regexp.MustCompile(`\\b([0-9a-z-]{1,}\\.freshdesk\\.com)\\b`)\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"freshdesk\"}) + `\\b([0-9A-Za-z]{20})\\b`)\n)",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "\\bftp://[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b",
      "detector_name": "ftp",
      "file_path": "trufflehog-main\\pkg\\detectors\\ftp\\ftp.go",
      "line_number": 35,
      "context": "\nvar (\n\tkeyPat = regexp.MustCompile(`\\bftp://[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bftp://[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b",
      "detector_name": "ftp",
      "file_path": "trufflehog-main\\pkg\\detectors\\ftp\\ftp.go",
      "line_number": 35,
      "context": "\nvar (\n\tkeyPat = regexp.MustCompile(`\\bftp://[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(na1\\.[A-Za-z0-9\\+\\/]{100})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\fullstory\\v2\\fullstory_v2.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(na1\\.[A-Za-z0-9\\+\\/]{100})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(na1\\.[A-Za-z0-9\\+\\/]{100})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\fullstory\\v2\\fullstory_v2.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(na1\\.[A-Za-z0-9\\+\\/]{100})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\{[^{]+auth_provider_x509_cert_url[^}]+\\}",
      "detector_name": "gcp",
      "file_path": "trufflehog-main\\pkg\\detectors\\gcp\\gcp.go",
      "line_number": 33,
      "context": "\nvar (\n\tkeyPat = regexp.MustCompile(`\\{[^{]+auth_provider_x509_cert_url[^}]+\\}`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\{[^{]+auth_provider_x509_cert_url[^}]+\\}",
      "detector_name": "gcp",
      "file_path": "trufflehog-main\\pkg\\detectors\\gcp\\gcp.go",
      "line_number": 33,
      "context": "\nvar (\n\tkeyPat = regexp.MustCompile(`\\{[^{]+auth_provider_x509_cert_url[^}]+\\}`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\{[^{]+client_secret[^}]+\\}",
      "detector_name": "gcpapplicationdefaultcredentials",
      "file_path": "trufflehog-main\\pkg\\detectors\\gcpapplicationdefaultcredentials\\gcpapplicationdefaultcredentials.go",
      "line_number": 33,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\{[^{]+client_secret[^}]+\\}`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\{[^{]+client_secret[^}]+\\}",
      "detector_name": "gcpapplicationdefaultcredentials",
      "file_path": "trufflehog-main\\pkg\\detectors\\gcpapplicationdefaultcredentials\\gcpapplicationdefaultcredentials.go",
      "line_number": 33,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\{[^{]+client_secret[^}]+\\}`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b((?:master-|account-)[0-9A-Za-z]{20})\\b",
      "detector_name": "gemini",
      "file_path": "trufflehog-main\\pkg\\detectors\\gemini\\gemini.go",
      "line_number": 39,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b((?:master-|account-)[0-9A-Za-z]{20})\\b`)\n\tsecretPat = regexp.MustCompile(`[A-Za-z0-9]{27,28}`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b((?:master-|account-)[0-9A-Za-z]{20})\\b",
      "detector_name": "gemini",
      "file_path": "trufflehog-main\\pkg\\detectors\\gemini\\gemini.go",
      "line_number": 39,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b((?:master-|account-)[0-9A-Za-z]{20})\\b`)\n\tsecretPat = regexp.MustCompile(`[A-Za-z0-9]{27,28}`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "[A-Za-z0-9]{27,28}",
      "detector_name": "gemini",
      "file_path": "trufflehog-main\\pkg\\detectors\\gemini\\gemini.go",
      "line_number": 40,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b((?:master-|account-)[0-9A-Za-z]{20})\\b`)\n\tsecretPat = regexp.MustCompile(`[A-Za-z0-9]{27,28}`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "[A-Za-z0-9]{27,28}",
      "detector_name": "gemini",
      "file_path": "trufflehog-main\\pkg\\detectors\\gemini\\gemini.go",
      "line_number": 40,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b((?:master-|account-)[0-9A-Za-z]{20})\\b`)\n\tsecretPat = regexp.MustCompile(`[A-Za-z0-9]{27,28}`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "secretPat"
    },
    {
      "pattern": "\\b((?:ghp|gho|ghu|ghs|ghr|github_pat)_[a-zA-Z0-9_]{36,255})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\github\\v2\\github.go",
      "line_number": 36,
      "context": "\t// https://github.blog/2021-04-05-behind-githubs-new-authentication-token-formats/\n\t// https://github.blog/changelog/2022-10-18-introducing-fine-grained-personal-access-tokens/\n\tkeyPat = regexp.MustCompile(`\\b((?:ghp|gho|ghu|ghs|ghr|github_pat)_[a-zA-Z0-9_]{36,255})\\b`)\n\n\t// TODO: Oauth2 client_id and client_secret",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b((?:ghp|gho|ghu|ghs|ghr|github_pat)_[a-zA-Z0-9_]{36,255})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\github\\v2\\github.go",
      "line_number": 36,
      "context": "\t// https://github.blog/2021-04-05-behind-githubs-new-authentication-token-formats/\n\t// https://github.blog/changelog/2022-10-18-introducing-fine-grained-personal-access-tokens/\n\tkeyPat = regexp.MustCompile(`\\b((?:ghp|gho|ghu|ghs|ghr|github_pat)_[a-zA-Z0-9_]{36,255})\\b`)\n\n\t// TODO: Oauth2 client_id and client_secret",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(glpat-[a-zA-Z0-9\\-=_]{20,22})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\gitlab\\v2\\gitlab_v2.go",
      "line_number": 33,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tkeyPat        = regexp.MustCompile(`\\b(glpat-[a-zA-Z0-9\\-=_]{20,22})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(glpat-[a-zA-Z0-9\\-=_]{20,22})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\gitlab\\v2\\gitlab_v2.go",
      "line_number": 33,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tkeyPat        = regexp.MustCompile(`\\b(glpat-[a-zA-Z0-9\\-=_]{20,22})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(live_[0-9A-Za-z\\_\\-]{40}[ \"'\\r\\n]{1})",
      "detector_name": "gocardless",
      "file_path": "trufflehog-main\\pkg\\detectors\\gocardless\\gocardless.go",
      "line_number": 26,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\t// Removed bounds at the end of the regex since there are some cases that the token ends with an underscore (_) or a dash (-)\n\tkeyPat = regexp.MustCompile(`\\b(live_[0-9A-Za-z\\_\\-]{40}[ \"'\\r\\n]{1})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(live_[0-9A-Za-z\\_\\-]{40}[ \"'\\r\\n]{1})",
      "detector_name": "gocardless",
      "file_path": "trufflehog-main\\pkg\\detectors\\gocardless\\gocardless.go",
      "line_number": 26,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\t// Removed bounds at the end of the regex since there are some cases that the token ends with an underscore (_) or a dash (-)\n\tkeyPat = regexp.MustCompile(`\\b(live_[0-9A-Za-z\\_\\-]{40}[ \"'\\r\\n]{1})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(ya29\\.(?i:[a-z0-9_-]{10,}))(?:[^a-z0-9_-]|\\z)",
      "detector_name": "googleoauth2",
      "file_path": "trufflehog-main\\pkg\\detectors\\googleoauth2\\googleoauth2_access_token.go",
      "line_number": 34,
      "context": "\t// https://cloud.google.com/docs/authentication/token-types#access\n\t// https://github.com/GoogleChrome/developer.chrome.com/blob/51dd7dd5d510ed85d86f5a91cb8fde50b62351c7/site/en/docs/webstore/using_webstore_api/index.md?plain=1#L95\n\tkeyPat = regexp.MustCompile(`\\b(ya29\\.(?i:[a-z0-9_-]{10,}))(?:[^a-z0-9_-]|\\z)`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(ya29\\.(?i:[a-z0-9_-]{10,}))(?:[^a-z0-9_-]|\\z)",
      "detector_name": "googleoauth2",
      "file_path": "trufflehog-main\\pkg\\detectors\\googleoauth2\\googleoauth2_access_token.go",
      "line_number": 34,
      "context": "\t// https://cloud.google.com/docs/authentication/token-types#access\n\t// https://github.com/GoogleChrome/developer.chrome.com/blob/51dd7dd5d510ed85d86f5a91cb8fde50b62351c7/site/en/docs/webstore/using_webstore_api/index.md?plain=1#L95\n\tkeyPat = regexp.MustCompile(`\\b(ya29\\.(?i:[a-z0-9_-]{10,}))(?:[^a-z0-9_-]|\\z)`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(glc_eyJ[A-Za-z0-9+\\/=]{60,160})",
      "detector_name": "grafana",
      "file_path": "trufflehog-main\\pkg\\detectors\\grafana\\grafana.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(glc_eyJ[A-Za-z0-9+\\/=]{60,160})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(glc_eyJ[A-Za-z0-9+\\/=]{60,160})",
      "detector_name": "grafana",
      "file_path": "trufflehog-main\\pkg\\detectors\\grafana\\grafana.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(glc_eyJ[A-Za-z0-9+\\/=]{60,160})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(glsa_[0-9a-zA-Z_]{41})\\b",
      "detector_name": "grafanaserviceaccount",
      "file_path": "trufflehog-main\\pkg\\detectors\\grafanaserviceaccount\\grafanaserviceaccount.go",
      "line_number": 26,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b(glsa_[0-9a-zA-Z_]{41})\\b`)\n\tdomainPat = regexp.MustCompile(`\\b([a-zA-Z0-9-]+\\.grafana\\.net)\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(glsa_[0-9a-zA-Z_]{41})\\b",
      "detector_name": "grafanaserviceaccount",
      "file_path": "trufflehog-main\\pkg\\detectors\\grafanaserviceaccount\\grafanaserviceaccount.go",
      "line_number": 26,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b(glsa_[0-9a-zA-Z_]{41})\\b`)\n\tdomainPat = regexp.MustCompile(`\\b([a-zA-Z0-9-]+\\.grafana\\.net)\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9-]+\\.grafana\\.net)\\b",
      "detector_name": "grafanaserviceaccount",
      "file_path": "trufflehog-main\\pkg\\detectors\\grafanaserviceaccount\\grafanaserviceaccount.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b(glsa_[0-9a-zA-Z_]{41})\\b`)\n\tdomainPat = regexp.MustCompile(`\\b([a-zA-Z0-9-]+\\.grafana\\.net)\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9-]+\\.grafana\\.net)\\b",
      "detector_name": "grafanaserviceaccount",
      "file_path": "trufflehog-main\\pkg\\detectors\\grafanaserviceaccount\\grafanaserviceaccount.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b(glsa_[0-9a-zA-Z_]{41})\\b`)\n\tdomainPat = regexp.MustCompile(`\\b([a-zA-Z0-9-]+\\.grafana\\.net)\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "domainPat"
    },
    {
      "pattern": "\\b(ey[a-zA-Z0-9]{73}.ey[a-zA-Z0-9]{365}.[a-zA-Z0-9_-]{683})\\b",
      "detector_name": "graphcms",
      "file_path": "trufflehog-main\\pkg\\detectors\\graphcms\\graphcms.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(ey[a-zA-Z0-9]{73}.ey[a-zA-Z0-9]{365}.[a-zA-Z0-9_-]{683})\\b`)\n\tidPat  = regexp.MustCompile(detectors.PrefixRegex([]string{\"graph\"}) + `\\b([a-z0-9]{25})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(ey[a-zA-Z0-9]{73}.ey[a-zA-Z0-9]{365}.[a-zA-Z0-9_-]{683})\\b",
      "detector_name": "graphcms",
      "file_path": "trufflehog-main\\pkg\\detectors\\graphcms\\graphcms.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(ey[a-zA-Z0-9]{73}.ey[a-zA-Z0-9]{365}.[a-zA-Z0-9_-]{683})\\b`)\n\tidPat  = regexp.MustCompile(detectors.PrefixRegex([]string{\"graph\"}) + `\\b([a-z0-9]{25})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(gsk_[a-zA-Z0-9]{52})\\b",
      "detector_name": "groq",
      "file_path": "trufflehog-main\\pkg\\detectors\\groq\\groq.go",
      "line_number": 25,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tkeyPat        = regexp.MustCompile(`\\b(gsk_[a-zA-Z0-9]{52})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(gsk_[a-zA-Z0-9]{52})\\b",
      "detector_name": "groq",
      "file_path": "trufflehog-main\\pkg\\detectors\\groq\\groq.go",
      "line_number": 25,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tkeyPat        = regexp.MustCompile(`\\b(gsk_[a-zA-Z0-9]{52})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(https?:\\/\\/[^\\s\\/]*\\.hashicorp\\.cloud(?::\\d+)?)(?:\\/[^\\s]*)?",
      "detector_name": "hashicorpvaultauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\hashicorpvaultauth\\hashicorpvaultauth.go",
      "line_number": 34,
      "context": "\n\t// Vault URL pattern - HashiCorp Cloud or any HTTPS/HTTP Vault endpoint\n\tvaultUrlPat = regexp.MustCompile(`(https?:\\/\\/[^\\s\\/]*\\.hashicorp\\.cloud(?::\\d+)?)(?:\\/[^\\s]*)?`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(https?:\\/\\/[^\\s\\/]*\\.hashicorp\\.cloud(?::\\d+)?)(?:\\/[^\\s]*)?",
      "detector_name": "hashicorpvaultauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\hashicorpvaultauth\\hashicorpvaultauth.go",
      "line_number": 34,
      "context": "\n\t// Vault URL pattern - HashiCorp Cloud or any HTTPS/HTTP Vault endpoint\n\tvaultUrlPat = regexp.MustCompile(`(https?:\\/\\/[^\\s\\/]*\\.hashicorp\\.cloud(?::\\d+)?)(?:\\/[^\\s]*)?`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "vaultUrlPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9-]+\\.hasura\\.app)\\b",
      "detector_name": "hasura",
      "file_path": "trufflehog-main\\pkg\\detectors\\hasura\\hasura.go",
      "line_number": 30,
      "context": "\n\t// domainPat finds Hasura cloud domains.\n\tdomainPat = regexp.MustCompile(`\\b([a-zA-Z0-9-]+\\.hasura\\.app)\\b`)\n\t// keyPat finds potential Hasura admin secrets, often prefixed with \"hasura\".\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"hasura\"}) + `\\b([a-zA-Z0-9]{64})\\b`)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9-]+\\.hasura\\.app)\\b",
      "detector_name": "hasura",
      "file_path": "trufflehog-main\\pkg\\detectors\\hasura\\hasura.go",
      "line_number": 30,
      "context": "\n\t// domainPat finds Hasura cloud domains.\n\tdomainPat = regexp.MustCompile(`\\b([a-zA-Z0-9-]+\\.hasura\\.app)\\b`)\n\t// keyPat finds potential Hasura admin secrets, often prefixed with \"hasura\".\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"hasura\"}) + `\\b([a-zA-Z0-9]{64})\\b`)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "domainPat"
    },
    {
      "pattern": "\\b(HRKU-AA[0-9a-zA-Z_-]{58})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\heroku\\v2\\heroku.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(HRKU-AA[0-9a-zA-Z_-]{58})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(HRKU-AA[0-9a-zA-Z_-]{58})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\heroku\\v2\\heroku.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(HRKU-AA[0-9a-zA-Z_-]{58})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(pat-(?:eu|na)1-[A-Za-z0-9]{8}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{12})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\hubspot_apikey\\v2\\apikey.go",
      "line_number": 31,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\b(pat-(?:eu|na)1-[A-Za-z0-9]{8}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{12})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(pat-(?:eu|na)1-[A-Za-z0-9]{8}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{12})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\hubspot_apikey\\v2\\apikey.go",
      "line_number": 31,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\b(pat-(?:eu|na)1-[A-Za-z0-9]{8}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{4}\\-[A-Za-z0-9]{12})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(?:hf_|api_org_)[a-zA-Z0-9]{34}\\b",
      "detector_name": "huggingface",
      "file_path": "trufflehog-main\\pkg\\detectors\\huggingface\\huggingface.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(?:hf_|api_org_)[a-zA-Z0-9]{34}\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(?:hf_|api_org_)[a-zA-Z0-9]{34}\\b",
      "detector_name": "huggingface",
      "file_path": "trufflehog-main\\pkg\\detectors\\huggingface\\huggingface.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(?:hf_|api_org_)[a-zA-Z0-9]{34}\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(s-s4t2(?:ud|af)-[a-f0-9]{64})\\b",
      "detector_name": "intra42",
      "file_path": "trufflehog-main\\pkg\\detectors\\intra42\\intra42.go",
      "line_number": 32,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives\n\tkeyPat = regexp.MustCompile(`\\b(s-s4t2(?:ud|af)-[a-f0-9]{64})\\b`)\n\tidPat  = regexp.MustCompile(`\\b(u-s4t2(?:ud|af)-[a-f0-9]{64})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(s-s4t2(?:ud|af)-[a-f0-9]{64})\\b",
      "detector_name": "intra42",
      "file_path": "trufflehog-main\\pkg\\detectors\\intra42\\intra42.go",
      "line_number": 32,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives\n\tkeyPat = regexp.MustCompile(`\\b(s-s4t2(?:ud|af)-[a-f0-9]{64})\\b`)\n\tidPat  = regexp.MustCompile(`\\b(u-s4t2(?:ud|af)-[a-f0-9]{64})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(u-s4t2(?:ud|af)-[a-f0-9]{64})\\b",
      "detector_name": "intra42",
      "file_path": "trufflehog-main\\pkg\\detectors\\intra42\\intra42.go",
      "line_number": 33,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives\n\tkeyPat = regexp.MustCompile(`\\b(s-s4t2(?:ud|af)-[a-f0-9]{64})\\b`)\n\tidPat  = regexp.MustCompile(`\\b(u-s4t2(?:ud|af)-[a-f0-9]{64})\\b`)\n)\n",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(u-s4t2(?:ud|af)-[a-f0-9]{64})\\b",
      "detector_name": "intra42",
      "file_path": "trufflehog-main\\pkg\\detectors\\intra42\\intra42.go",
      "line_number": 33,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives\n\tkeyPat = regexp.MustCompile(`\\b(s-s4t2(?:ud|af)-[a-f0-9]{64})\\b`)\n\tidPat  = regexp.MustCompile(`\\b(u-s4t2(?:ud|af)-[a-f0-9]{64})\\b`)\n)\n",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": "idPat"
    },
    {
      "pattern": "\\b([0-9a-z]{1,}\\.invoiceocean\\.com)\\b",
      "detector_name": "invoiceocean",
      "file_path": "trufflehog-main\\pkg\\detectors\\invoiceocean\\invoiceocean.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"invoiceocean\"}) + `\\b([0-9A-Za-z]{20})\\b`)\n\turlPat = regexp.MustCompile(`\\b([0-9a-z]{1,}\\.invoiceocean\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([0-9a-z]{1,}\\.invoiceocean\\.com)\\b",
      "detector_name": "invoiceocean",
      "file_path": "trufflehog-main\\pkg\\detectors\\invoiceocean\\invoiceocean.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"invoiceocean\"}) + `\\b([0-9A-Za-z]{20})\\b`)\n\turlPat = regexp.MustCompile(`\\b([0-9a-z]{1,}\\.invoiceocean\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "(?i)jdbc:[\\w]{3,10}:[^\\s\"'<>,(){}[\\]&]{10,512}",
      "detector_name": "jdbc",
      "file_path": "trufflehog-main\\pkg\\detectors\\jdbc\\jdbc.go",
      "line_number": 53,
      "context": "\nvar (\n\tkeyPat = regexp.MustCompile(`(?i)jdbc:[\\w]{3,10}:[^\\s\"'<>,(){}[\\]&]{10,512}`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)jdbc:[\\w]{3,10}:[^\\s\"'<>,(){}[\\]&]{10,512}",
      "detector_name": "jdbc",
      "file_path": "trufflehog-main\\pkg\\detectors\\jdbc\\jdbc.go",
      "line_number": 53,
      "context": "\nvar (\n\tkeyPat = regexp.MustCompile(`(?i)jdbc:[\\w]{3,10}:[^\\s\"'<>,(){}[\\]&]{10,512}`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(?i)pass.*?=(.+?)\\b",
      "detector_name": "jdbc",
      "file_path": "trufflehog-main\\pkg\\detectors\\jdbc\\jdbc.go",
      "line_number": 192,
      "context": "// Naively search the string for \"pass=\"\nfunc tryRedactRegex(conn string) (string, bool) {\n\tpattern := regexp.MustCompile(`(?i)pass.*?=(.+?)\\b`)\n\tvar found bool\n\tnewConn := pattern.ReplaceAllStringFunc(conn, func(s string) string {",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(ATATT[A-Za-z0-9+/=_-]+=[A-Za-z0-9]{8})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\jiratoken\\v2\\jiratoken_v2.go",
      "line_number": 33,
      "context": "\t// https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/\n\t// Tokens created after Jan 18 2023 use a variable length\n\ttokenPat  = regexp.MustCompile(`\\b(ATATT[A-Za-z0-9+/=_-]+=[A-Za-z0-9]{8})\\b`)\n\tdomainPat = regexp.MustCompile(`\\b((?:[a-zA-Z0-9-]{1,24}\\.)+[a-zA-Z0-9-]{2,24}\\.[a-zA-Z0-9-]{2,16})\\b`)\n\temailPat  = regexp.MustCompile(common.EmailPattern)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(ATATT[A-Za-z0-9+/=_-]+=[A-Za-z0-9]{8})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\jiratoken\\v2\\jiratoken_v2.go",
      "line_number": 33,
      "context": "\t// https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/\n\t// Tokens created after Jan 18 2023 use a variable length\n\ttokenPat  = regexp.MustCompile(`\\b(ATATT[A-Za-z0-9+/=_-]+=[A-Za-z0-9]{8})\\b`)\n\tdomainPat = regexp.MustCompile(`\\b((?:[a-zA-Z0-9-]{1,24}\\.)+[a-zA-Z0-9-]{2,24}\\.[a-zA-Z0-9-]{2,16})\\b`)\n\temailPat  = regexp.MustCompile(common.EmailPattern)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": "tokenPat"
    },
    {
      "pattern": "\\b((?:[a-zA-Z0-9-]{1,24}\\.)+[a-zA-Z0-9-]{2,24}\\.[a-zA-Z0-9-]{2,16})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\jiratoken\\v2\\jiratoken_v2.go",
      "line_number": 34,
      "context": "\t// Tokens created after Jan 18 2023 use a variable length\n\ttokenPat  = regexp.MustCompile(`\\b(ATATT[A-Za-z0-9+/=_-]+=[A-Za-z0-9]{8})\\b`)\n\tdomainPat = regexp.MustCompile(`\\b((?:[a-zA-Z0-9-]{1,24}\\.)+[a-zA-Z0-9-]{2,24}\\.[a-zA-Z0-9-]{2,16})\\b`)\n\temailPat  = regexp.MustCompile(common.EmailPattern)\n)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b((?:[a-zA-Z0-9-]{1,24}\\.)+[a-zA-Z0-9-]{2,24}\\.[a-zA-Z0-9-]{2,16})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\jiratoken\\v2\\jiratoken_v2.go",
      "line_number": 34,
      "context": "\t// Tokens created after Jan 18 2023 use a variable length\n\ttokenPat  = regexp.MustCompile(`\\b(ATATT[A-Za-z0-9+/=_-]+=[A-Za-z0-9]{8})\\b`)\n\tdomainPat = regexp.MustCompile(`\\b((?:[a-zA-Z0-9-]{1,24}\\.)+[a-zA-Z0-9-]{2,24}\\.[a-zA-Z0-9-]{2,16})\\b`)\n\temailPat  = regexp.MustCompile(common.EmailPattern)\n)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "domainPat"
    },
    {
      "pattern": "\\b([0-9a-z]{1,}\\.kanbantool\\.com)\\b",
      "detector_name": "kanban",
      "file_path": "trufflehog-main\\pkg\\detectors\\kanban\\kanban.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"kanban\"}) + `\\b([0-9A-Z]{12})\\b`)\n\turlPat = regexp.MustCompile(`\\b([0-9a-z]{1,}\\.kanbantool\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([0-9a-z]{1,}\\.kanbantool\\.com)\\b",
      "detector_name": "kanban",
      "file_path": "trufflehog-main\\pkg\\detectors\\kanban\\kanban.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"kanban\"}) + `\\b([0-9A-Z]{12})\\b`)\n\turlPat = regexp.MustCompile(`\\b([0-9a-z]{1,}\\.kanbantool\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "\\b(pk_[[:alnum:]]{34})\\b",
      "detector_name": "klaviyo",
      "file_path": "trufflehog-main\\pkg\\detectors\\klaviyo\\klaviyo.go",
      "line_number": 26,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(pk_[[:alnum:]]{34})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(pk_[[:alnum:]]{34})\\b",
      "detector_name": "klaviyo",
      "file_path": "trufflehog-main\\pkg\\detectors\\klaviyo\\klaviyo.go",
      "line_number": 26,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(pk_[[:alnum:]]{34})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(lsv2_(?:pt|sk)_[a-f0-9]{32}_[a-f0-9]{10})\\b",
      "detector_name": "langsmith",
      "file_path": "trufflehog-main\\pkg\\detectors\\langsmith\\langsmith.go",
      "line_number": 26,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(lsv2_(?:pt|sk)_[a-f0-9]{32}_[a-f0-9]{10})\\b`) // personal api token and service keys\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(lsv2_(?:pt|sk)_[a-f0-9]{32}_[a-f0-9]{10})\\b",
      "detector_name": "langsmith",
      "file_path": "trufflehog-main\\pkg\\detectors\\langsmith\\langsmith.go",
      "line_number": 26,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(lsv2_(?:pt|sk)_[a-f0-9]{32}_[a-f0-9]{10})\\b`) // personal api token and service keys\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b((?:api|sdk)-[a-z0-9]{8}-[a-z0-9]{4}-4[a-z0-9]{3}-[a-z0-9]{4}-[a-z0-9]{12})\\b",
      "detector_name": "launchdarkly",
      "file_path": "trufflehog-main\\pkg\\detectors\\launchdarkly\\launchdarkly.go",
      "line_number": 30,
      "context": "\t// Launchdarkly keys are UUIDv4s with either api- or sdk- prefixes.\n\t// mob- keys are possible, but are not sensitive credentials.\n\tkeyPat = regexp.MustCompile(`\\b((?:api|sdk)-[a-z0-9]{8}-[a-z0-9]{4}-4[a-z0-9]{3}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b((?:api|sdk)-[a-z0-9]{8}-[a-z0-9]{4}-4[a-z0-9]{3}-[a-z0-9]{4}-[a-z0-9]{12})\\b",
      "detector_name": "launchdarkly",
      "file_path": "trufflehog-main\\pkg\\detectors\\launchdarkly\\launchdarkly.go",
      "line_number": 30,
      "context": "\t// Launchdarkly keys are UUIDv4s with either api- or sdk- prefixes.\n\t// mob- keys are possible, but are not sensitive credentials.\n\tkeyPat = regexp.MustCompile(`\\b((?:api|sdk)-[a-z0-9]{8}-[a-z0-9]{4}-4[a-z0-9]{3}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(?i)ldaps?://[\\S]+\\b",
      "detector_name": "ldap",
      "file_path": "trufflehog-main\\pkg\\detectors\\ldap\\ldap.go",
      "line_number": 32,
      "context": "var (\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\turiPat = regexp.MustCompile(`\\b(?i)ldaps?://[\\S]+\\b`)\n\t// ldap://127.0.0.1:389\n\t// ldap://127.0.0.1",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(?i)ldaps?://[\\S]+\\b",
      "detector_name": "ldap",
      "file_path": "trufflehog-main\\pkg\\detectors\\ldap\\ldap.go",
      "line_number": 32,
      "context": "var (\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\turiPat = regexp.MustCompile(`\\b(?i)ldaps?://[\\S]+\\b`)\n\t// ldap://127.0.0.1:389\n\t// ldap://127.0.0.1",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "uriPat"
    },
    {
      "pattern": "OpenDSObject\\(\\\"(?i)(ldaps?://[\\S]+)\\\", ?\\\"([\\S]+)\\\", ?\\\"([\\S]+)\\\",[ \\d]+\\)",
      "detector_name": "ldap",
      "file_path": "trufflehog-main\\pkg\\detectors\\ldap\\ldap.go",
      "line_number": 44,
      "context": "\t// https://learn.microsoft.com/en-us/windows/win32/api/iads/nf-iads-iadsopendsobject-opendsobject?redirectedfrom=MSDN\n\t// I.E. Set ou = dso.OpenDSObject(\"LDAP://DC.business.com/OU=IT,DC=Business,DC=com\", \"Business\\administrator\", \"Pa$$word01\", 1)\n\tiadPat = regexp.MustCompile(`OpenDSObject\\(\\\"(?i)(ldaps?://[\\S]+)\\\", ?\\\"([\\S]+)\\\", ?\\\"([\\S]+)\\\",[ \\d]+\\)`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "OpenDSObject\\(\\\"(?i)(ldaps?://[\\S]+)\\\", ?\\\"([\\S]+)\\\", ?\\\"([\\S]+)\\\",[ \\d]+\\)",
      "detector_name": "ldap",
      "file_path": "trufflehog-main\\pkg\\detectors\\ldap\\ldap.go",
      "line_number": 44,
      "context": "\t// https://learn.microsoft.com/en-us/windows/win32/api/iads/nf-iads-iadsopendsobject-opendsobject?redirectedfrom=MSDN\n\t// I.E. Set ou = dso.OpenDSObject(\"LDAP://DC.business.com/OU=IT,DC=Business,DC=com\", \"Business\\administrator\", \"Pa$$word01\", 1)\n\tiadPat = regexp.MustCompile(`OpenDSObject\\(\\\"(?i)(ldaps?://[\\S]+)\\\", ?\\\"([\\S]+)\\\", ?\\\"([\\S]+)\\\",[ \\d]+\\)`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "iadPat"
    },
    {
      "pattern": "\\b(lin_api_[0-9A-Za-z]{40})\\b",
      "detector_name": "linearapi",
      "file_path": "trufflehog-main\\pkg\\detectors\\linearapi\\linearapi.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(lin_api_[0-9A-Za-z]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(lin_api_[0-9A-Za-z]{40})\\b",
      "detector_name": "linearapi",
      "file_path": "trufflehog-main\\pkg\\detectors\\linearapi\\linearapi.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(lin_api_[0-9A-Za-z]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(https?://[A-Za-z0-9-]+\\.ladesk\\.com)\\b",
      "detector_name": "liveagent",
      "file_path": "trufflehog-main\\pkg\\detectors\\liveagent\\liveagent.go",
      "line_number": 26,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tdomainPat = regexp.MustCompile(`\\b(https?://[A-Za-z0-9-]+\\.ladesk\\.com)\\b`)\n\tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"liveagent\", \"apikey\"}) + `\\b([a-zA-Z0-9]{32})\\b`)\n)",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(https?://[A-Za-z0-9-]+\\.ladesk\\.com)\\b",
      "detector_name": "liveagent",
      "file_path": "trufflehog-main\\pkg\\detectors\\liveagent\\liveagent.go",
      "line_number": 26,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tdomainPat = regexp.MustCompile(`\\b(https?://[A-Za-z0-9-]+\\.ladesk\\.com)\\b`)\n\tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"liveagent\", \"apikey\"}) + `\\b([a-zA-Z0-9]{32})\\b`)\n)",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "domainPat"
    },
    {
      "pattern": "\\b(pk\\.[a-zA-Z-0-9]{32})\\b",
      "detector_name": "locationiq",
      "file_path": "trufflehog-main\\pkg\\detectors\\locationiq\\locationiq.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(pk\\.[a-zA-Z-0-9]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(pk\\.[a-zA-Z-0-9]{32})\\b",
      "detector_name": "locationiq",
      "file_path": "trufflehog-main\\pkg\\detectors\\locationiq\\locationiq.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(pk\\.[a-zA-Z-0-9]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9-]+\\.loggly\\.com)\\b",
      "detector_name": "loggly",
      "file_path": "trufflehog-main\\pkg\\detectors\\loggly\\loggly.go",
      "line_number": 26,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tdomainPat = regexp.MustCompile(`\\b([a-zA-Z0-9-]+\\.loggly\\.com)\\b`)\n\tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"loggly\"}) + `\\b([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9-]+\\.loggly\\.com)\\b",
      "detector_name": "loggly",
      "file_path": "trufflehog-main\\pkg\\detectors\\loggly\\loggly.go",
      "line_number": 26,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tdomainPat = regexp.MustCompile(`\\b([a-zA-Z0-9-]+\\.loggly\\.com)\\b`)\n\tkeyPat    = regexp.MustCompile(detectors.PrefixRegex([]string{\"loggly\"}) + `\\b([a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "domainPat"
    },
    {
      "pattern": "[0-9a-f]{32}-us[0-9]{1,2}",
      "detector_name": "mailchimp",
      "file_path": "trufflehog-main\\pkg\\detectors\\mailchimp\\mailchimp.go",
      "line_number": 24,
      "context": "var (\n\tclient = common.SaneHttpClient()\n\tkeyPat = regexp.MustCompile(`[0-9a-f]{32}-us[0-9]{1,2}`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "[0-9a-f]{32}-us[0-9]{1,2}",
      "detector_name": "mailchimp",
      "file_path": "trufflehog-main\\pkg\\detectors\\mailchimp\\mailchimp.go",
      "line_number": 24,
      "context": "var (\n\tclient = common.SaneHttpClient()\n\tkeyPat = regexp.MustCompile(`[0-9a-f]{32}-us[0-9]{1,2}`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(key-[a-z0-9]{32})\\b",
      "detector_name": "mailgun",
      "file_path": "trufflehog-main\\pkg\\detectors\\mailgun\\mailgun.go",
      "line_number": 31,
      "context": "\ttokenPats = map[string]*regexp.Regexp{\n\t\t\"Original MailGun Token\": regexp.MustCompile(detectors.PrefixRegex([]string{\"mailgun\"}) + `\\b([a-zA-Z0-9-]{72})\\b`),\n\t\t\"Key-MailGun Token\":      regexp.MustCompile(`\\b(key-[a-z0-9]{32})\\b`),\n\t\t\"Hex MailGun Token\":      regexp.MustCompile(`\\b([a-f0-9]{32}-[a-f0-9]{8}-[a-f0-9]{8})\\b`),\n\t}",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-f0-9]{32}-[a-f0-9]{8}-[a-f0-9]{8})\\b",
      "detector_name": "mailgun",
      "file_path": "trufflehog-main\\pkg\\detectors\\mailgun\\mailgun.go",
      "line_number": 32,
      "context": "\t\t\"Original MailGun Token\": regexp.MustCompile(detectors.PrefixRegex([]string{\"mailgun\"}) + `\\b([a-zA-Z0-9-]{72})\\b`),\n\t\t\"Key-MailGun Token\":      regexp.MustCompile(`\\b(key-[a-z0-9]{32})\\b`),\n\t\t\"Hex MailGun Token\":      regexp.MustCompile(`\\b([a-f0-9]{32}-[a-f0-9]{8}-[a-f0-9]{8})\\b`),\n\t}\n)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "([a-zA-Z-0-9]{4,32})",
      "detector_name": "mapbox",
      "file_path": "trufflehog-main\\pkg\\detectors\\mapbox\\mapbox.go",
      "line_number": 24,
      "context": "var (\n\tclient = common.SaneHttpClient()\n\tidPat  = regexp.MustCompile(`([a-zA-Z-0-9]{4,32})`)\n\tkeyPat = regexp.MustCompile(`\\b(sk\\.[a-zA-Z-0-9\\.]{80,240})\\b`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "([a-zA-Z-0-9]{4,32})",
      "detector_name": "mapbox",
      "file_path": "trufflehog-main\\pkg\\detectors\\mapbox\\mapbox.go",
      "line_number": 24,
      "context": "var (\n\tclient = common.SaneHttpClient()\n\tidPat  = regexp.MustCompile(`([a-zA-Z-0-9]{4,32})`)\n\tkeyPat = regexp.MustCompile(`\\b(sk\\.[a-zA-Z-0-9\\.]{80,240})\\b`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": "idPat"
    },
    {
      "pattern": "\\b(sk\\.[a-zA-Z-0-9\\.]{80,240})\\b",
      "detector_name": "mapbox",
      "file_path": "trufflehog-main\\pkg\\detectors\\mapbox\\mapbox.go",
      "line_number": 25,
      "context": "\tclient = common.SaneHttpClient()\n\tidPat  = regexp.MustCompile(`([a-zA-Z-0-9]{4,32})`)\n\tkeyPat = regexp.MustCompile(`\\b(sk\\.[a-zA-Z-0-9\\.]{80,240})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sk\\.[a-zA-Z-0-9\\.]{80,240})\\b",
      "detector_name": "mapbox",
      "file_path": "trufflehog-main\\pkg\\detectors\\mapbox\\mapbox.go",
      "line_number": 25,
      "context": "\tclient = common.SaneHttpClient()\n\tidPat  = regexp.MustCompile(`([a-zA-Z-0-9]{4,32})`)\n\tkeyPat = regexp.MustCompile(`\\b(sk\\.[a-zA-Z-0-9\\.]{80,240})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9]{6}_[a-zA-Z0-9]{29}_mmk)\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\maxmindlicense\\v2\\maxmindlicense_v2.go",
      "line_number": 27,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tkeyPat        = regexp.MustCompile(`\\b([a-zA-Z0-9]{6}_[a-zA-Z0-9]{29}_mmk)\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9]{6}_[a-zA-Z0-9]{29}_mmk)\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\maxmindlicense\\v2\\maxmindlicense_v2.go",
      "line_number": 27,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tkeyPat        = regexp.MustCompile(`\\b([a-zA-Z0-9]{6}_[a-zA-Z0-9]{29}_mmk)\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(https:\\/\\/[a-zA-Z-0-9]+\\.webhook\\.office\\.com\\/webhookb2\\/[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12}\\@[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12}\\/IncomingWebhook\\/[a-zA-Z-0-9]{32}\\/[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12})",
      "detector_name": "microsoftteamswebhook",
      "file_path": "trufflehog-main\\pkg\\detectors\\microsoftteamswebhook\\microsoftteamswebhook.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(https:\\/\\/[a-zA-Z-0-9]+\\.webhook\\.office\\.com\\/webhookb2\\/[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12}\\@[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12}\\/IncomingWebhook\\/[a-zA-Z-0-9]{32}\\/[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(https:\\/\\/[a-zA-Z-0-9]+\\.webhook\\.office\\.com\\/webhookb2\\/[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12}\\@[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12}\\/IncomingWebhook\\/[a-zA-Z-0-9]{32}\\/[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12})",
      "detector_name": "microsoftteamswebhook",
      "file_path": "trufflehog-main\\pkg\\detectors\\microsoftteamswebhook\\microsoftteamswebhook.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(https:\\/\\/[a-zA-Z-0-9]+\\.webhook\\.office\\.com\\/webhookb2\\/[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12}\\@[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12}\\/IncomingWebhook\\/[a-zA-Z-0-9]{32}\\/[a-zA-Z-0-9]{8}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{4}-[a-zA-Z-0-9]{12})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([0-9a-z-]{1,}.mite.yo.lk)\\b",
      "detector_name": "mite",
      "file_path": "trufflehog-main\\pkg\\detectors\\mite\\mite.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"mite\"}) + `\\b([0-9a-z]{16})\\b`)\n\turlPat = regexp.MustCompile(`\\b([0-9a-z-]{1,}.mite.yo.lk)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([0-9a-z-]{1,}.mite.yo.lk)\\b",
      "detector_name": "mite",
      "file_path": "trufflehog-main\\pkg\\detectors\\mite\\mite.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"mite\"}) + `\\b([0-9a-z]{16})\\b`)\n\turlPat = regexp.MustCompile(`\\b([0-9a-z-]{1,}.mite.yo.lk)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "\\b(mongodb(?:\\+srv)?://(?P<username>\\S{3,50}):(?P<password>\\S{3,88})@(?P<host>[-.%\\w]+(?::\\d{1,5})?(?:,[-.%\\w]+(?::\\d{1,5})?)*)(?:/(?P<authdb>[\\w-]+)?(?P<options>\\?\\w+=[\\w@/.$-]+(?:&(?:amp;)?\\w+=[\\w@/.$-]+)*)?)?)(?:\\b|$)",
      "detector_name": "mongodb",
      "file_path": "trufflehog-main\\pkg\\detectors\\mongodb\\mongodb.go",
      "line_number": 32,
      "context": "\tdefaultTimeout = 5 * time.Second\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tconnStrPat = regexp.MustCompile(`\\b(mongodb(?:\\+srv)?://(?P<username>\\S{3,50}):(?P<password>\\S{3,88})@(?P<host>[-.%\\w]+(?::\\d{1,5})?(?:,[-.%\\w]+(?::\\d{1,5})?)*)(?:/(?P<authdb>[\\w-]+)?(?P<options>\\?\\w+=[\\w@/.$-]+(?:&(?:amp;)?\\w+=[\\w@/.$-]+)*)?)?)(?:\\b|$)`)\n\t// TODO: Add support for sharded cluster, replica set and Atlas Deployment.\n\tplaceholderPasswordPat = regexp.MustCompile(`^[xX]+|\\*+$`)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(mongodb(?:\\+srv)?://(?P<username>\\S{3,50}):(?P<password>\\S{3,88})@(?P<host>[-.%\\w]+(?::\\d{1,5})?(?:,[-.%\\w]+(?::\\d{1,5})?)*)(?:/(?P<authdb>[\\w-]+)?(?P<options>\\?\\w+=[\\w@/.$-]+(?:&(?:amp;)?\\w+=[\\w@/.$-]+)*)?)?)(?:\\b|$)",
      "detector_name": "mongodb",
      "file_path": "trufflehog-main\\pkg\\detectors\\mongodb\\mongodb.go",
      "line_number": 32,
      "context": "\tdefaultTimeout = 5 * time.Second\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tconnStrPat = regexp.MustCompile(`\\b(mongodb(?:\\+srv)?://(?P<username>\\S{3,50}):(?P<password>\\S{3,88})@(?P<host>[-.%\\w]+(?::\\d{1,5})?(?:,[-.%\\w]+(?::\\d{1,5})?)*)(?:/(?P<authdb>[\\w-]+)?(?P<options>\\?\\w+=[\\w@/.$-]+(?:&(?:amp;)?\\w+=[\\w@/.$-]+)*)?)?)(?:\\b|$)`)\n\t// TODO: Add support for sharded cluster, replica set and Atlas Deployment.\n\tplaceholderPasswordPat = regexp.MustCompile(`^[xX]+|\\*+$`)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": "connStrPat"
    },
    {
      "pattern": "^[xX]+|\\*+$",
      "detector_name": "mongodb",
      "file_path": "trufflehog-main\\pkg\\detectors\\mongodb\\mongodb.go",
      "line_number": 34,
      "context": "\tconnStrPat = regexp.MustCompile(`\\b(mongodb(?:\\+srv)?://(?P<username>\\S{3,50}):(?P<password>\\S{3,88})@(?P<host>[-.%\\w]+(?::\\d{1,5})?(?:,[-.%\\w]+(?::\\d{1,5})?)*)(?:/(?P<authdb>[\\w-]+)?(?P<options>\\?\\w+=[\\w@/.$-]+(?:&(?:amp;)?\\w+=[\\w@/.$-]+)*)?)?)(?:\\b|$)`)\n\t// TODO: Add support for sharded cluster, replica set and Atlas Deployment.\n\tplaceholderPasswordPat = regexp.MustCompile(`^[xX]+|\\*+$`)\n)\n",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "^[xX]+|\\*+$",
      "detector_name": "mongodb",
      "file_path": "trufflehog-main\\pkg\\detectors\\mongodb\\mongodb.go",
      "line_number": 34,
      "context": "\tconnStrPat = regexp.MustCompile(`\\b(mongodb(?:\\+srv)?://(?P<username>\\S{3,50}):(?P<password>\\S{3,88})@(?P<host>[-.%\\w]+(?::\\d{1,5})?(?:,[-.%\\w]+(?::\\d{1,5})?)*)(?:/(?P<authdb>[\\w-]+)?(?P<options>\\?\\w+=[\\w@/.$-]+(?:&(?:amp;)?\\w+=[\\w@/.$-]+)*)?)?)(?:\\b|$)`)\n\t// TODO: Add support for sharded cluster, replica set and Atlas Deployment.\n\tplaceholderPasswordPat = regexp.MustCompile(`^[xX]+|\\*+$`)\n)\n",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": "placeholderPasswordPat"
    },
    {
      "pattern": "\\b([[:alnum:]]{84})\\b",
      "detector_name": "ngc",
      "file_path": "trufflehog-main\\pkg\\detectors\\ngc\\ngc.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\t// keyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"ngc\"}) + `\\b([[:alnum:]]{26}:[[:alnum:]]{8}-[[:alnum:]]{4}-[[:alnum:]]{4}-[[:alnum:]]{4}-[[:alnum:]]{12})\\b`)\n\tkeyPat1 = regexp.MustCompile(`\\b([[:alnum:]]{84})\\b`)\n\tkeyPat2 = regexp.MustCompile(`\\b([[:alnum:]]{26}:[[:alnum:]]{8}-[[:alnum:]]{4}-[[:alnum:]]{4}-[[:alnum:]]{4}-[[:alnum:]]{12})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([[:alnum:]]{26}:[[:alnum:]]{8}-[[:alnum:]]{4}-[[:alnum:]]{4}-[[:alnum:]]{4}-[[:alnum:]]{12})\\b",
      "detector_name": "ngc",
      "file_path": "trufflehog-main\\pkg\\detectors\\ngc\\ngc.go",
      "line_number": 28,
      "context": "\t// keyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"ngc\"}) + `\\b([[:alnum:]]{26}:[[:alnum:]]{8}-[[:alnum:]]{4}-[[:alnum:]]{4}-[[:alnum:]]{4}-[[:alnum:]]{12})\\b`)\n\tkeyPat1 = regexp.MustCompile(`\\b([[:alnum:]]{84})\\b`)\n\tkeyPat2 = regexp.MustCompile(`\\b([[:alnum:]]{26}:[[:alnum:]]{8}-[[:alnum:]]{4}-[[:alnum:]]{4}-[[:alnum:]]{4}-[[:alnum:]]{12})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(NF\\-[a-zA-Z0-9]{32})\\b",
      "detector_name": "nightfall",
      "file_path": "trufflehog-main\\pkg\\detectors\\nightfall\\nightfall.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(NF\\-[a-zA-Z0-9]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(NF\\-[a-zA-Z0-9]{32})\\b",
      "detector_name": "nightfall",
      "file_path": "trufflehog-main\\pkg\\detectors\\nightfall\\nightfall.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(NF\\-[a-zA-Z0-9]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(secret_[A-Za-z0-9]{43})\\b",
      "detector_name": "notion",
      "file_path": "trufflehog-main\\pkg\\detectors\\notion\\notion.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(secret_[A-Za-z0-9]{43})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(secret_[A-Za-z0-9]{43})\\b",
      "detector_name": "notion",
      "file_path": "trufflehog-main\\pkg\\detectors\\notion\\notion.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(secret_[A-Za-z0-9]{43})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(npm_[0-9a-zA-Z]{36})",
      "detector_name": "npmtokenv2",
      "file_path": "trufflehog-main\\pkg\\detectors\\npmtokenv2\\npmtokenv2.go",
      "line_number": 26,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(npm_[0-9a-zA-Z]{36})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(npm_[0-9a-zA-Z]{36})",
      "detector_name": "npmtokenv2",
      "file_path": "trufflehog-main\\pkg\\detectors\\npmtokenv2\\npmtokenv2.go",
      "line_number": 26,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(npm_[0-9a-zA-Z]{36})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(nvapi-[a-zA-Z0-9_-]{64})\\b",
      "detector_name": "nvapi",
      "file_path": "trufflehog-main\\pkg\\detectors\\nvapi\\nvapi.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(nvapi-[a-zA-Z0-9_-]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(nvapi-[a-zA-Z0-9_-]{64})\\b",
      "detector_name": "nvapi",
      "file_path": "trufflehog-main\\pkg\\detectors\\nvapi\\nvapi.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(nvapi-[a-zA-Z0-9_-]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b[a-z0-9-]{1,40}\\.okta(?:preview|-emea){0,1}\\.com\\b",
      "detector_name": "okta",
      "file_path": "trufflehog-main\\pkg\\detectors\\okta\\okta.go",
      "line_number": 26,
      "context": "var (\n\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\tdomainPat     = regexp.MustCompile(`\\b[a-z0-9-]{1,40}\\.okta(?:preview|-emea){0,1}\\.com\\b`)\n\ttokenPat      = regexp.MustCompile(`\\b00[a-zA-Z0-9_-]{40}\\b`)\n\t// TODO: Oauth client secrets",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b[a-z0-9-]{1,40}\\.okta(?:preview|-emea){0,1}\\.com\\b",
      "detector_name": "okta",
      "file_path": "trufflehog-main\\pkg\\detectors\\okta\\okta.go",
      "line_number": 26,
      "context": "var (\n\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\tdomainPat     = regexp.MustCompile(`\\b[a-z0-9-]{1,40}\\.okta(?:preview|-emea){0,1}\\.com\\b`)\n\ttokenPat      = regexp.MustCompile(`\\b00[a-zA-Z0-9_-]{40}\\b`)\n\t// TODO: Oauth client secrets",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "domainPat"
    },
    {
      "pattern": "\\b00[a-zA-Z0-9_-]{40}\\b",
      "detector_name": "okta",
      "file_path": "trufflehog-main\\pkg\\detectors\\okta\\okta.go",
      "line_number": 27,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\tdomainPat     = regexp.MustCompile(`\\b[a-z0-9-]{1,40}\\.okta(?:preview|-emea){0,1}\\.com\\b`)\n\ttokenPat      = regexp.MustCompile(`\\b00[a-zA-Z0-9_-]{40}\\b`)\n\t// TODO: Oauth client secrets\n)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b00[a-zA-Z0-9_-]{40}\\b",
      "detector_name": "okta",
      "file_path": "trufflehog-main\\pkg\\detectors\\okta\\okta.go",
      "line_number": 27,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\tdomainPat     = regexp.MustCompile(`\\b[a-z0-9-]{1,40}\\.okta(?:preview|-emea){0,1}\\.com\\b`)\n\ttokenPat      = regexp.MustCompile(`\\b00[a-zA-Z0-9_-]{40}\\b`)\n\t// TODO: Oauth client secrets\n)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": "tokenPat"
    },
    {
      "pattern": "(?i)id[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})",
      "detector_name": "onelogin",
      "file_path": "trufflehog-main\\pkg\\detectors\\onelogin\\onelogin.go",
      "line_number": 23,
      "context": "\nvar (\n\toauthClientIDPat     = regexp.MustCompile(`(?i)id[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})`)\n\toauthClientSecretPat = regexp.MustCompile(`(?i)secret[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})`)\n",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)id[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})",
      "detector_name": "onelogin",
      "file_path": "trufflehog-main\\pkg\\detectors\\onelogin\\onelogin.go",
      "line_number": 23,
      "context": "\nvar (\n\toauthClientIDPat     = regexp.MustCompile(`(?i)id[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})`)\n\toauthClientSecretPat = regexp.MustCompile(`(?i)secret[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})`)\n",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": "oauthClientIDPat"
    },
    {
      "pattern": "(?i)secret[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})",
      "detector_name": "onelogin",
      "file_path": "trufflehog-main\\pkg\\detectors\\onelogin\\onelogin.go",
      "line_number": 24,
      "context": "var (\n\toauthClientIDPat     = regexp.MustCompile(`(?i)id[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})`)\n\toauthClientSecretPat = regexp.MustCompile(`(?i)secret[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})`)\n\n\t// TODO: Legacy API tokens",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)secret[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})",
      "detector_name": "onelogin",
      "file_path": "trufflehog-main\\pkg\\detectors\\onelogin\\onelogin.go",
      "line_number": 24,
      "context": "var (\n\toauthClientIDPat     = regexp.MustCompile(`(?i)id[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})`)\n\toauthClientSecretPat = regexp.MustCompile(`(?i)secret[a-zA-Z0-9_' \"=]{0,20}([a-z0-9]{64})`)\n\n\t// TODO: Legacy API tokens",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "oauthClientSecretPat"
    },
    {
      "pattern": "\\b(sk-[[:alnum:]_-]+T3BlbkFJ[[:alnum:]_-]+)\\b",
      "detector_name": "openai",
      "file_path": "trufflehog-main\\pkg\\detectors\\openai\\openai.go",
      "line_number": 31,
      "context": "\n\t// The magic string T3BlbkFJ is the base64-encoded string: OpenAI\n\tkeyPat = regexp.MustCompile(`\\b(sk-[[:alnum:]_-]+T3BlbkFJ[[:alnum:]_-]+)\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sk-[[:alnum:]_-]+T3BlbkFJ[[:alnum:]_-]+)\\b",
      "detector_name": "openai",
      "file_path": "trufflehog-main\\pkg\\detectors\\openai\\openai.go",
      "line_number": 31,
      "context": "\n\t// The magic string T3BlbkFJ is the base64-encoded string: OpenAI\n\tkeyPat = regexp.MustCompile(`\\b(sk-[[:alnum:]_-]+T3BlbkFJ[[:alnum:]_-]+)\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9_-]{64,})\\b",
      "detector_name": "openvpn",
      "file_path": "trufflehog-main\\pkg\\detectors\\openvpn\\openvpn.go",
      "line_number": 28,
      "context": "\n\tclientIDPat     = regexp.MustCompile(detectors.PrefixRegex([]string{\"openvpn\"}) + `\\b([A-Za-z0-9-]{3,40}\\.[A-Za-z0-9-]{3,40})\\b`)\n\tclientSecretPat = regexp.MustCompile(`\\b([a-zA-Z0-9_-]{64,})\\b`)\n\tdomainPat       = regexp.MustCompile(`\\b(https?://[A-Za-z0-9-]+\\.api\\.openvpn\\.com)\\b`)\n)",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9_-]{64,})\\b",
      "detector_name": "openvpn",
      "file_path": "trufflehog-main\\pkg\\detectors\\openvpn\\openvpn.go",
      "line_number": 28,
      "context": "\n\tclientIDPat     = regexp.MustCompile(detectors.PrefixRegex([]string{\"openvpn\"}) + `\\b([A-Za-z0-9-]{3,40}\\.[A-Za-z0-9-]{3,40})\\b`)\n\tclientSecretPat = regexp.MustCompile(`\\b([a-zA-Z0-9_-]{64,})\\b`)\n\tdomainPat       = regexp.MustCompile(`\\b(https?://[A-Za-z0-9-]+\\.api\\.openvpn\\.com)\\b`)\n)",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "clientSecretPat"
    },
    {
      "pattern": "\\b(https?://[A-Za-z0-9-]+\\.api\\.openvpn\\.com)\\b",
      "detector_name": "openvpn",
      "file_path": "trufflehog-main\\pkg\\detectors\\openvpn\\openvpn.go",
      "line_number": 29,
      "context": "\tclientIDPat     = regexp.MustCompile(detectors.PrefixRegex([]string{\"openvpn\"}) + `\\b([A-Za-z0-9-]{3,40}\\.[A-Za-z0-9-]{3,40})\\b`)\n\tclientSecretPat = regexp.MustCompile(`\\b([a-zA-Z0-9_-]{64,})\\b`)\n\tdomainPat       = regexp.MustCompile(`\\b(https?://[A-Za-z0-9-]+\\.api\\.openvpn\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(https?://[A-Za-z0-9-]+\\.api\\.openvpn\\.com)\\b",
      "detector_name": "openvpn",
      "file_path": "trufflehog-main\\pkg\\detectors\\openvpn\\openvpn.go",
      "line_number": 29,
      "context": "\tclientIDPat     = regexp.MustCompile(detectors.PrefixRegex([]string{\"openvpn\"}) + `\\b([A-Za-z0-9-]{3,40}\\.[A-Za-z0-9-]{3,40})\\b`)\n\tclientSecretPat = regexp.MustCompile(`\\b([a-zA-Z0-9_-]{64,})\\b`)\n\tdomainPat       = regexp.MustCompile(`\\b(https?://[A-Za-z0-9-]+\\.api\\.openvpn\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "domainPat"
    },
    {
      "pattern": "\\b(ak_live_[a-zA-Z0-9]{30})\\b",
      "detector_name": "pagarme",
      "file_path": "trufflehog-main\\pkg\\detectors\\pagarme\\pagarme.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(ak_live_[a-zA-Z0-9]{30})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(ak_live_[a-zA-Z0-9]{30})\\b",
      "detector_name": "pagarme",
      "file_path": "trufflehog-main\\pkg\\detectors\\pagarme\\pagarme.go",
      "line_number": 27,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(ak_live_[a-zA-Z0-9]{30})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([A-Za-z0-9_\\.]{7}-[A-Za-z0-9_\\.]{72}|[A-Za-z0-9_\\.]{5}-[A-Za-z0-9_\\.]{38})\\b",
      "detector_name": "paypaloauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\paypaloauth\\paypaloauth.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tidPat  = regexp.MustCompile(`\\b([A-Za-z0-9_\\.]{7}-[A-Za-z0-9_\\.]{72}|[A-Za-z0-9_\\.]{5}-[A-Za-z0-9_\\.]{38})\\b`)\n\tkeyPat = regexp.MustCompile(`\\b([A-Za-z0-9_\\.\\-]{44,80})\\b`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([A-Za-z0-9_\\.]{7}-[A-Za-z0-9_\\.]{72}|[A-Za-z0-9_\\.]{5}-[A-Za-z0-9_\\.]{38})\\b",
      "detector_name": "paypaloauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\paypaloauth\\paypaloauth.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tidPat  = regexp.MustCompile(`\\b([A-Za-z0-9_\\.]{7}-[A-Za-z0-9_\\.]{72}|[A-Za-z0-9_\\.]{5}-[A-Za-z0-9_\\.]{38})\\b`)\n\tkeyPat = regexp.MustCompile(`\\b([A-Za-z0-9_\\.\\-]{44,80})\\b`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": "idPat"
    },
    {
      "pattern": "\\b([A-Za-z0-9_\\.\\-]{44,80})\\b",
      "detector_name": "paypaloauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\paypaloauth\\paypaloauth.go",
      "line_number": 28,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tidPat  = regexp.MustCompile(`\\b([A-Za-z0-9_\\.]{7}-[A-Za-z0-9_\\.]{72}|[A-Za-z0-9_\\.]{5}-[A-Za-z0-9_\\.]{38})\\b`)\n\tkeyPat = regexp.MustCompile(`\\b([A-Za-z0-9_\\.\\-]{44,80})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([A-Za-z0-9_\\.\\-]{44,80})\\b",
      "detector_name": "paypaloauth",
      "file_path": "trufflehog-main\\pkg\\detectors\\paypaloauth\\paypaloauth.go",
      "line_number": 28,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tidPat  = regexp.MustCompile(`\\b([A-Za-z0-9_\\.]{7}-[A-Za-z0-9_\\.]{72}|[A-Za-z0-9_\\.]{5}-[A-Za-z0-9_\\.]{38})\\b`)\n\tkeyPat = regexp.MustCompile(`\\b([A-Za-z0-9_\\.\\-]{44,80})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(sk\\_[a-z]{1,}\\_[A-Za-z0-9]{40})\\b",
      "detector_name": "paystack",
      "file_path": "trufflehog-main\\pkg\\detectors\\paystack\\paystack.go",
      "line_number": 23,
      "context": "\tclient = common.SaneHttpClient()\n\t// TODO: support live key\n\tkeyPat = regexp.MustCompile(`\\b(sk\\_[a-z]{1,}\\_[A-Za-z0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sk\\_[a-z]{1,}\\_[A-Za-z0-9]{40})\\b",
      "detector_name": "paystack",
      "file_path": "trufflehog-main\\pkg\\detectors\\paystack\\paystack.go",
      "line_number": 23,
      "context": "\tclient = common.SaneHttpClient()\n\t// TODO: support live key\n\tkeyPat = regexp.MustCompile(`\\b(sk\\_[a-z]{1,}\\_[A-Za-z0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b[a-z0-9]{12}\\b",
      "detector_name": "planetscale",
      "file_path": "trufflehog-main\\pkg\\detectors\\planetscale\\planetscale.go",
      "line_number": 22,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tusernamePat   = regexp.MustCompile(`\\b[a-z0-9]{12}\\b`)\n\tpasswordPat   = regexp.MustCompile(`\\bpscale_tkn_[A-Za-z0-9_]{43}\\b`)\n)",
      "pattern_type": "usernamePat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b[a-z0-9]{12}\\b",
      "detector_name": "planetscale",
      "file_path": "trufflehog-main\\pkg\\detectors\\planetscale\\planetscale.go",
      "line_number": 22,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tusernamePat   = regexp.MustCompile(`\\b[a-z0-9]{12}\\b`)\n\tpasswordPat   = regexp.MustCompile(`\\bpscale_tkn_[A-Za-z0-9_]{43}\\b`)\n)",
      "pattern_type": "usernamePat",
      "is_compiled": true,
      "variable_name": "usernamePat"
    },
    {
      "pattern": "\\bpscale_tkn_[A-Za-z0-9_]{43}\\b",
      "detector_name": "planetscale",
      "file_path": "trufflehog-main\\pkg\\detectors\\planetscale\\planetscale.go",
      "line_number": 23,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\tusernamePat   = regexp.MustCompile(`\\b[a-z0-9]{12}\\b`)\n\tpasswordPat   = regexp.MustCompile(`\\bpscale_tkn_[A-Za-z0-9_]{43}\\b`)\n)\n",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bpscale_tkn_[A-Za-z0-9_]{43}\\b",
      "detector_name": "planetscale",
      "file_path": "trufflehog-main\\pkg\\detectors\\planetscale\\planetscale.go",
      "line_number": 23,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\tusernamePat   = regexp.MustCompile(`\\b[a-z0-9]{12}\\b`)\n\tpasswordPat   = regexp.MustCompile(`\\bpscale_tkn_[A-Za-z0-9_]{43}\\b`)\n)\n",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": "passwordPat"
    },
    {
      "pattern": "\\b[a-z0-9]{20}\\b",
      "detector_name": "planetscaledb",
      "file_path": "trufflehog-main\\pkg\\detectors\\planetscaledb\\planetscaledb.go",
      "line_number": 23,
      "context": "\nvar (\n\tusernamePat = regexp.MustCompile(`\\b[a-z0-9]{20}\\b`)\n\tpasswordPat = regexp.MustCompile(`\\bpscale_pw_[A-Za-z0-9_]{43}\\b`)\n\thostPat     = regexp.MustCompile(`\\b(aws|gcp)\\.connect\\.psdb\\.cloud\\b`)",
      "pattern_type": "usernamePat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b[a-z0-9]{20}\\b",
      "detector_name": "planetscaledb",
      "file_path": "trufflehog-main\\pkg\\detectors\\planetscaledb\\planetscaledb.go",
      "line_number": 23,
      "context": "\nvar (\n\tusernamePat = regexp.MustCompile(`\\b[a-z0-9]{20}\\b`)\n\tpasswordPat = regexp.MustCompile(`\\bpscale_pw_[A-Za-z0-9_]{43}\\b`)\n\thostPat     = regexp.MustCompile(`\\b(aws|gcp)\\.connect\\.psdb\\.cloud\\b`)",
      "pattern_type": "usernamePat",
      "is_compiled": true,
      "variable_name": "usernamePat"
    },
    {
      "pattern": "\\bpscale_pw_[A-Za-z0-9_]{43}\\b",
      "detector_name": "planetscaledb",
      "file_path": "trufflehog-main\\pkg\\detectors\\planetscaledb\\planetscaledb.go",
      "line_number": 24,
      "context": "var (\n\tusernamePat = regexp.MustCompile(`\\b[a-z0-9]{20}\\b`)\n\tpasswordPat = regexp.MustCompile(`\\bpscale_pw_[A-Za-z0-9_]{43}\\b`)\n\thostPat     = regexp.MustCompile(`\\b(aws|gcp)\\.connect\\.psdb\\.cloud\\b`)\n)",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bpscale_pw_[A-Za-z0-9_]{43}\\b",
      "detector_name": "planetscaledb",
      "file_path": "trufflehog-main\\pkg\\detectors\\planetscaledb\\planetscaledb.go",
      "line_number": 24,
      "context": "var (\n\tusernamePat = regexp.MustCompile(`\\b[a-z0-9]{20}\\b`)\n\tpasswordPat = regexp.MustCompile(`\\bpscale_pw_[A-Za-z0-9_]{43}\\b`)\n\thostPat     = regexp.MustCompile(`\\b(aws|gcp)\\.connect\\.psdb\\.cloud\\b`)\n)",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": "passwordPat"
    },
    {
      "pattern": "\\b(aws|gcp)\\.connect\\.psdb\\.cloud\\b",
      "detector_name": "planetscaledb",
      "file_path": "trufflehog-main\\pkg\\detectors\\planetscaledb\\planetscaledb.go",
      "line_number": 25,
      "context": "\tusernamePat = regexp.MustCompile(`\\b[a-z0-9]{20}\\b`)\n\tpasswordPat = regexp.MustCompile(`\\bpscale_pw_[A-Za-z0-9_]{43}\\b`)\n\thostPat     = regexp.MustCompile(`\\b(aws|gcp)\\.connect\\.psdb\\.cloud\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(aws|gcp)\\.connect\\.psdb\\.cloud\\b",
      "detector_name": "planetscaledb",
      "file_path": "trufflehog-main\\pkg\\detectors\\planetscaledb\\planetscaledb.go",
      "line_number": 25,
      "context": "\tusernamePat = regexp.MustCompile(`\\b[a-z0-9]{20}\\b`)\n\tpasswordPat = regexp.MustCompile(`\\bpscale_pw_[A-Za-z0-9_]{43}\\b`)\n\thostPat     = regexp.MustCompile(`\\b(aws|gcp)\\.connect\\.psdb\\.cloud\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "hostPat"
    },
    {
      "pattern": "\\b(?i)(postgres(?:ql)?)://\\S+\\b",
      "detector_name": "postgres",
      "file_path": "trufflehog-main\\pkg\\detectors\\postgres\\postgres.go",
      "line_number": 51,
      "context": "var (\n\t_                  detectors.Detector = (*Scanner)(nil)\n\turiPattern                            = regexp.MustCompile(`\\b(?i)(postgres(?:ql)?)://\\S+\\b`)\n\tconnStrPartPattern                    = regexp.MustCompile(`([[:alpha:]]+)='(.+?)' ?`)\n)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(?i)(postgres(?:ql)?)://\\S+\\b",
      "detector_name": "postgres",
      "file_path": "trufflehog-main\\pkg\\detectors\\postgres\\postgres.go",
      "line_number": 51,
      "context": "var (\n\t_                  detectors.Detector = (*Scanner)(nil)\n\turiPattern                            = regexp.MustCompile(`\\b(?i)(postgres(?:ql)?)://\\S+\\b`)\n\tconnStrPartPattern                    = regexp.MustCompile(`([[:alpha:]]+)='(.+?)' ?`)\n)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "uriPattern"
    },
    {
      "pattern": "([[:alpha:]]+)='(.+?)' ?",
      "detector_name": "postgres",
      "file_path": "trufflehog-main\\pkg\\detectors\\postgres\\postgres.go",
      "line_number": 52,
      "context": "\t_                  detectors.Detector = (*Scanner)(nil)\n\turiPattern                            = regexp.MustCompile(`\\b(?i)(postgres(?:ql)?)://\\S+\\b`)\n\tconnStrPartPattern                    = regexp.MustCompile(`([[:alpha:]]+)='(.+?)' ?`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "([[:alpha:]]+)='(.+?)' ?",
      "detector_name": "postgres",
      "file_path": "trufflehog-main\\pkg\\detectors\\postgres\\postgres.go",
      "line_number": 52,
      "context": "\t_                  detectors.Detector = (*Scanner)(nil)\n\turiPattern                            = regexp.MustCompile(`\\b(?i)(postgres(?:ql)?)://\\S+\\b`)\n\tconnStrPartPattern                    = regexp.MustCompile(`([[:alpha:]]+)='(.+?)' ?`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "connStrPartPattern"
    },
    {
      "pattern": "\\b(phx_[a-zA-Z0-9_]{43})\\b",
      "detector_name": "posthog",
      "file_path": "trufflehog-main\\pkg\\detectors\\posthog\\posthog.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(phx_[a-zA-Z0-9_]{43})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(phx_[a-zA-Z0-9_]{43})\\b",
      "detector_name": "posthog",
      "file_path": "trufflehog-main\\pkg\\detectors\\posthog\\posthog.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(phx_[a-zA-Z0-9_]{43})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(PMAK-[a-zA-Z-0-9]{59})\\b",
      "detector_name": "postman",
      "file_path": "trufflehog-main\\pkg\\detectors\\postman\\postman.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(PMAK-[a-zA-Z-0-9]{59})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(PMAK-[a-zA-Z-0-9]{59})\\b",
      "detector_name": "postman",
      "file_path": "trufflehog-main\\pkg\\detectors\\postman\\postman.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(PMAK-[a-zA-Z-0-9]{59})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(pnu_[a-zA-Z0-9]{36})\\b",
      "detector_name": "prefect",
      "file_path": "trufflehog-main\\pkg\\detectors\\prefect\\prefect.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(pnu_[a-zA-Z0-9]{36})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(pnu_[a-zA-Z0-9]{36})\\b",
      "detector_name": "prefect",
      "file_path": "trufflehog-main\\pkg\\detectors\\prefect\\prefect.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(pnu_[a-zA-Z0-9]{36})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(?i)-----\\s*?BEGIN[ A-Z0-9_-]*?PRIVATE KEY\\s*?-----[\\s\\S]*?----\\s*?END[ A-Z0-9_-]*? PRIVATE KEY\\s*?-----",
      "detector_name": "privatekey",
      "file_path": "trufflehog-main\\pkg\\detectors\\privatekey\\privatekey.go",
      "line_number": 42,
      "context": "\t// TODO: add base64 encoded key support\n\tclient = common.RetryableHTTPClient()\n\tkeyPat = regexp.MustCompile(`(?i)-----\\s*?BEGIN[ A-Z0-9_-]*?PRIVATE KEY\\s*?-----[\\s\\S]*?----\\s*?END[ A-Z0-9_-]*? PRIVATE KEY\\s*?-----`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)-----\\s*?BEGIN[ A-Z0-9_-]*?PRIVATE KEY\\s*?-----[\\s\\S]*?----\\s*?END[ A-Z0-9_-]*? PRIVATE KEY\\s*?-----",
      "detector_name": "privatekey",
      "file_path": "trufflehog-main\\pkg\\detectors\\privatekey\\privatekey.go",
      "line_number": 42,
      "context": "\t// TODO: add base64 encoded key support\n\tclient = common.RetryableHTTPClient()\n\tkeyPat = regexp.MustCompile(`(?i)-----\\s*?BEGIN[ A-Z0-9_-]*?PRIVATE KEY\\s*?-----[\\s\\S]*?----\\s*?END[ A-Z0-9_-]*? PRIVATE KEY\\s*?-----`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(pub-c-[0-9a-z]{8}-[0-9a-z]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b",
      "detector_name": "pubnubpublishkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\pubnubpublishkey\\pubnubpublishkey.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tpubPat = regexp.MustCompile(`\\b(pub-c-[0-9a-z]{8}-[0-9a-z]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n\tsubPat = regexp.MustCompile(`\\b(sub-c-[0-9a-z]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(pub-c-[0-9a-z]{8}-[0-9a-z]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b",
      "detector_name": "pubnubpublishkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\pubnubpublishkey\\pubnubpublishkey.go",
      "line_number": 28,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tpubPat = regexp.MustCompile(`\\b(pub-c-[0-9a-z]{8}-[0-9a-z]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n\tsubPat = regexp.MustCompile(`\\b(sub-c-[0-9a-z]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "pubPat"
    },
    {
      "pattern": "\\b(sub-c-[0-9a-z]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b",
      "detector_name": "pubnubpublishkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\pubnubpublishkey\\pubnubpublishkey.go",
      "line_number": 29,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tpubPat = regexp.MustCompile(`\\b(pub-c-[0-9a-z]{8}-[0-9a-z]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n\tsubPat = regexp.MustCompile(`\\b(sub-c-[0-9a-z]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sub-c-[0-9a-z]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b",
      "detector_name": "pubnubpublishkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\pubnubpublishkey\\pubnubpublishkey.go",
      "line_number": 29,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tpubPat = regexp.MustCompile(`\\b(pub-c-[0-9a-z]{8}-[0-9a-z]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n\tsubPat = regexp.MustCompile(`\\b(sub-c-[0-9a-z]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "subPat"
    },
    {
      "pattern": "\\b(sub-c-[0-9a-z]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b",
      "detector_name": "pubnubsubscriptionkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\pubnubsubscriptionkey\\pubnubsubscriptionkey.go",
      "line_number": 26,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sub-c-[0-9a-z]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sub-c-[0-9a-z]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b",
      "detector_name": "pubnubsubscriptionkey",
      "file_path": "trufflehog-main\\pkg\\detectors\\pubnubsubscriptionkey\\pubnubsubscriptionkey.go",
      "line_number": 26,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sub-c-[0-9a-z]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(pul-[a-z0-9]{40})\\b",
      "detector_name": "pulumi",
      "file_path": "trufflehog-main\\pkg\\detectors\\pulumi\\pulumi.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(pul-[a-z0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(pul-[a-z0-9]{40})\\b",
      "detector_name": "pulumi",
      "file_path": "trufflehog-main\\pkg\\detectors\\pulumi\\pulumi.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(pul-[a-z0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(pypi-AgEIcHlwaS5vcmcCJ[a-zA-Z0-9-_]{150,157})",
      "detector_name": "pypi",
      "file_path": "trufflehog-main\\pkg\\detectors\\pypi\\pypi.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(\"(pypi-AgEIcHlwaS5vcmcCJ[a-zA-Z0-9-_]{150,157})\")\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(pypi-AgEIcHlwaS5vcmcCJ[a-zA-Z0-9-_]{150,157})",
      "detector_name": "pypi",
      "file_path": "trufflehog-main\\pkg\\detectors\\pypi\\pypi.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(\"(pypi-AgEIcHlwaS5vcmcCJ[a-zA-Z0-9-_]{150,157})\")\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(?:amqps?):\\/\\/[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b",
      "detector_name": "rabbitmq",
      "file_path": "trufflehog-main\\pkg\\detectors\\rabbitmq\\rabbitmq.go",
      "line_number": 23,
      "context": "\nvar (\n\tkeyPat = regexp.MustCompile(`\\b(?:amqps?):\\/\\/[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(?:amqps?):\\/\\/[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b",
      "detector_name": "rabbitmq",
      "file_path": "trufflehog-main\\pkg\\detectors\\rabbitmq\\rabbitmq.go",
      "line_number": 23,
      "context": "\nvar (\n\tkeyPat = regexp.MustCompile(`\\b(?:amqps?):\\/\\/[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(ramp_id_[[:alnum:]]{40})\\b",
      "detector_name": "ramp",
      "file_path": "trufflehog-main\\pkg\\detectors\\ramp\\ramp.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tkeyPat    = regexp.MustCompile(`\\b(ramp_id_[[:alnum:]]{40})\\b`)\n\tsecretPat = regexp.MustCompile(`\\b(ramp_sec_[[:alnum:]]{48})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(ramp_id_[[:alnum:]]{40})\\b",
      "detector_name": "ramp",
      "file_path": "trufflehog-main\\pkg\\detectors\\ramp\\ramp.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tkeyPat    = regexp.MustCompile(`\\b(ramp_id_[[:alnum:]]{40})\\b`)\n\tsecretPat = regexp.MustCompile(`\\b(ramp_sec_[[:alnum:]]{48})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(ramp_sec_[[:alnum:]]{48})\\b",
      "detector_name": "ramp",
      "file_path": "trufflehog-main\\pkg\\detectors\\ramp\\ramp.go",
      "line_number": 29,
      "context": "\n\tkeyPat    = regexp.MustCompile(`\\b(ramp_id_[[:alnum:]]{40})\\b`)\n\tsecretPat = regexp.MustCompile(`\\b(ramp_sec_[[:alnum:]]{48})\\b`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(ramp_sec_[[:alnum:]]{48})\\b",
      "detector_name": "ramp",
      "file_path": "trufflehog-main\\pkg\\detectors\\ramp\\ramp.go",
      "line_number": 29,
      "context": "\n\tkeyPat    = regexp.MustCompile(`\\b(ramp_id_[[:alnum:]]{40})\\b`)\n\tsecretPat = regexp.MustCompile(`\\b(ramp_sec_[[:alnum:]]{48})\\b`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "secretPat"
    },
    {
      "pattern": "(?i)\\brzp_live_[A-Za-z0-9]{14}\\b",
      "detector_name": "razorpay",
      "file_path": "trufflehog-main\\pkg\\detectors\\razorpay\\razorpay.go",
      "line_number": 27,
      "context": "\tclient = common.SaneHttpClient()\n\n\tkeyPat    = regexp.MustCompile(`(?i)\\brzp_live_[A-Za-z0-9]{14}\\b`)\n\tsecretPat = regexp.MustCompile(`\\b[A-Za-z0-9]{24}\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)\\brzp_live_[A-Za-z0-9]{14}\\b",
      "detector_name": "razorpay",
      "file_path": "trufflehog-main\\pkg\\detectors\\razorpay\\razorpay.go",
      "line_number": 27,
      "context": "\tclient = common.SaneHttpClient()\n\n\tkeyPat    = regexp.MustCompile(`(?i)\\brzp_live_[A-Za-z0-9]{14}\\b`)\n\tsecretPat = regexp.MustCompile(`\\b[A-Za-z0-9]{24}\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b[A-Za-z0-9]{24}\\b",
      "detector_name": "razorpay",
      "file_path": "trufflehog-main\\pkg\\detectors\\razorpay\\razorpay.go",
      "line_number": 28,
      "context": "\n\tkeyPat    = regexp.MustCompile(`(?i)\\brzp_live_[A-Za-z0-9]{14}\\b`)\n\tsecretPat = regexp.MustCompile(`\\b[A-Za-z0-9]{24}\\b`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b[A-Za-z0-9]{24}\\b",
      "detector_name": "razorpay",
      "file_path": "trufflehog-main\\pkg\\detectors\\razorpay\\razorpay.go",
      "line_number": 28,
      "context": "\n\tkeyPat    = regexp.MustCompile(`(?i)\\brzp_live_[A-Za-z0-9]{14}\\b`)\n\tsecretPat = regexp.MustCompile(`\\b[A-Za-z0-9]{24}\\b`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "secretPat"
    },
    {
      "pattern": "(rdme_[a-z0-9]{70})",
      "detector_name": "readme",
      "file_path": "trufflehog-main\\pkg\\detectors\\readme\\readme.go",
      "line_number": 20,
      "context": "var (\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(rdme_[a-z0-9]{70})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(rdme_[a-z0-9]{70})",
      "detector_name": "readme",
      "file_path": "trufflehog-main\\pkg\\detectors\\readme\\readme.go",
      "line_number": 20,
      "context": "var (\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(rdme_[a-z0-9]{70})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(ey[a-zA-Z0-9-._]{153}.ey[a-zA-Z0-9-._]{916,1000})\\b",
      "detector_name": "reallysimplesystems",
      "file_path": "trufflehog-main\\pkg\\detectors\\reallysimplesystems\\reallysimplesystems.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(ey[a-zA-Z0-9-._]{153}.ey[a-zA-Z0-9-._]{916,1000})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(ey[a-zA-Z0-9-._]{153}.ey[a-zA-Z0-9-._]{916,1000})\\b",
      "detector_name": "reallysimplesystems",
      "file_path": "trufflehog-main\\pkg\\detectors\\reallysimplesystems\\reallysimplesystems.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(ey[a-zA-Z0-9-._]{153}.ey[a-zA-Z0-9-._]{916,1000})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\bsk(_test)?_(1|2|3|5|10)x[123]_[0-9a-fA-F]{64}\\b",
      "detector_name": "rechargepayments",
      "file_path": "trufflehog-main\\pkg\\detectors\\rechargepayments\\rechargepayments.go",
      "line_number": 25,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\ttokenPats = map[string]*regexp.Regexp{\n\t\t\"Newer API Keys\":        regexp.MustCompile(`\\bsk(_test)?_(1|2|3|5|10)x[123]_[0-9a-fA-F]{64}\\b`),\n\t\t\"Old API key (SHA-224)\": regexp.MustCompile(`\\b[0-9a-fA-F]{56}\\b`),\n\t\t\"Old API key (MD-5)\":    regexp.MustCompile(`\\b[0-9a-fA-F]{32}\\b`),",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b[0-9a-fA-F]{56}\\b",
      "detector_name": "rechargepayments",
      "file_path": "trufflehog-main\\pkg\\detectors\\rechargepayments\\rechargepayments.go",
      "line_number": 26,
      "context": "\ttokenPats = map[string]*regexp.Regexp{\n\t\t\"Newer API Keys\":        regexp.MustCompile(`\\bsk(_test)?_(1|2|3|5|10)x[123]_[0-9a-fA-F]{64}\\b`),\n\t\t\"Old API key (SHA-224)\": regexp.MustCompile(`\\b[0-9a-fA-F]{56}\\b`),\n\t\t\"Old API key (MD-5)\":    regexp.MustCompile(`\\b[0-9a-fA-F]{32}\\b`),\n\t}",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b[0-9a-fA-F]{32}\\b",
      "detector_name": "rechargepayments",
      "file_path": "trufflehog-main\\pkg\\detectors\\rechargepayments\\rechargepayments.go",
      "line_number": 27,
      "context": "\t\t\"Newer API Keys\":        regexp.MustCompile(`\\bsk(_test)?_(1|2|3|5|10)x[123]_[0-9a-fA-F]{64}\\b`),\n\t\t\"Old API key (SHA-224)\": regexp.MustCompile(`\\b[0-9a-fA-F]{56}\\b`),\n\t\t\"Old API key (MD-5)\":    regexp.MustCompile(`\\b[0-9a-fA-F]{32}\\b`),\n\t}\n)",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bredi[s]{1,2}://[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b",
      "detector_name": "redis",
      "file_path": "trufflehog-main\\pkg\\detectors\\redis\\redis.go",
      "line_number": 24,
      "context": "\nvar (\n\tkeyPat        = regexp.MustCompile(`\\bredi[s]{1,2}://[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b`)\n\tazureRedisPat = regexp.MustCompile(`\\b([\\w\\d.-]{1,100}\\.redis\\.cache\\.windows\\.net:6380),password=([^,]{44}),ssl=True,abortConnect=False\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bredi[s]{1,2}://[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b",
      "detector_name": "redis",
      "file_path": "trufflehog-main\\pkg\\detectors\\redis\\redis.go",
      "line_number": 24,
      "context": "\nvar (\n\tkeyPat        = regexp.MustCompile(`\\bredi[s]{1,2}://[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b`)\n\tazureRedisPat = regexp.MustCompile(`\\b([\\w\\d.-]{1,100}\\.redis\\.cache\\.windows\\.net:6380),password=([^,]{44}),ssl=True,abortConnect=False\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([\\w\\d.-]{1,100}\\.redis\\.cache\\.windows\\.net:6380),password=([^,]{44}),ssl=True,abortConnect=False\\b",
      "detector_name": "redis",
      "file_path": "trufflehog-main\\pkg\\detectors\\redis\\redis.go",
      "line_number": 25,
      "context": "var (\n\tkeyPat        = regexp.MustCompile(`\\bredi[s]{1,2}://[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b`)\n\tazureRedisPat = regexp.MustCompile(`\\b([\\w\\d.-]{1,100}\\.redis\\.cache\\.windows\\.net:6380),password=([^,]{44}),ssl=True,abortConnect=False\\b`)\n)\n",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([\\w\\d.-]{1,100}\\.redis\\.cache\\.windows\\.net:6380),password=([^,]{44}),ssl=True,abortConnect=False\\b",
      "detector_name": "redis",
      "file_path": "trufflehog-main\\pkg\\detectors\\redis\\redis.go",
      "line_number": 25,
      "context": "var (\n\tkeyPat        = regexp.MustCompile(`\\bredi[s]{1,2}://[\\S]{3,50}:([\\S]{3,50})@[-.%\\w\\/:]+\\b`)\n\tazureRedisPat = regexp.MustCompile(`\\b([\\w\\d.-]{1,100}\\.redis\\.cache\\.windows\\.net:6380),password=([^,]{44}),ssl=True,abortConnect=False\\b`)\n)\n",
      "pattern_type": "passwordPat",
      "is_compiled": true,
      "variable_name": "azureRedisPat"
    },
    {
      "pattern": "\\b(r8_[0-9A-Za-z-_]{37})\\b",
      "detector_name": "replicate",
      "file_path": "trufflehog-main\\pkg\\detectors\\replicate\\replicate.go",
      "line_number": 24,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tkeyPat        = regexp.MustCompile(`\\b(r8_[0-9A-Za-z-_]{37})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(r8_[0-9A-Za-z-_]{37})\\b",
      "detector_name": "replicate",
      "file_path": "trufflehog-main\\pkg\\detectors\\replicate\\replicate.go",
      "line_number": 24,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tkeyPat        = regexp.MustCompile(`\\b(r8_[0-9A-Za-z-_]{37})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(rh-api-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\\b",
      "detector_name": "robinhoodcrypto",
      "file_path": "trufflehog-main\\pkg\\detectors\\robinhoodcrypto\\robinhoodcrypto.go",
      "line_number": 33,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\t// Reference: https://docs.robinhood.com/crypto/trading/#section/Authentication\n\tkeyPat = regexp.MustCompile(`\\b(rh-api-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\\b`)\n\n\t// Matches base64 strings. Taken from https://stackoverflow.com/a/475217.",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(rh-api-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\\b",
      "detector_name": "robinhoodcrypto",
      "file_path": "trufflehog-main\\pkg\\detectors\\robinhoodcrypto\\robinhoodcrypto.go",
      "line_number": 33,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\t// Reference: https://docs.robinhood.com/crypto/trading/#section/Authentication\n\tkeyPat = regexp.MustCompile(`\\b(rh-api-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\\b`)\n\n\t// Matches base64 strings. Taken from https://stackoverflow.com/a/475217.",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)",
      "detector_name": "robinhoodcrypto",
      "file_path": "trufflehog-main\\pkg\\detectors\\robinhoodcrypto\\robinhoodcrypto.go",
      "line_number": 36,
      "context": "\n\t// Matches base64 strings. Taken from https://stackoverflow.com/a/475217.\n\tprivKeyBase64Pat = regexp.MustCompile(`(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)",
      "detector_name": "robinhoodcrypto",
      "file_path": "trufflehog-main\\pkg\\detectors\\robinhoodcrypto\\robinhoodcrypto.go",
      "line_number": 36,
      "context": "\n\t// Matches base64 strings. Taken from https://stackoverflow.com/a/475217.\n\tprivKeyBase64Pat = regexp.MustCompile(`(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "privKeyBase64Pat"
    },
    {
      "pattern": "\\b(rootly_[a-f0-9]{64})\\b",
      "detector_name": "rootly",
      "file_path": "trufflehog-main\\pkg\\detectors\\rootly\\rootly.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(rootly_[a-f0-9]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(rootly_[a-f0-9]{64})\\b",
      "detector_name": "rootly",
      "file_path": "trufflehog-main\\pkg\\detectors\\rootly\\rootly.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(rootly_[a-f0-9]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(rubygems_[a-zA0-9]{48})\\b",
      "detector_name": "rubygems",
      "file_path": "trufflehog-main\\pkg\\detectors\\rubygems\\rubygems.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(rubygems_[a-zA0-9]{48})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(rubygems_[a-zA0-9]{48})\\b",
      "detector_name": "rubygems",
      "file_path": "trufflehog-main\\pkg\\detectors\\rubygems\\rubygems.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(rubygems_[a-zA0-9]{48})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(salad_cloud_[0-9A-Za-z]{1,7}_[0-9A-Za-z]{7,235})\\b",
      "detector_name": "saladcloudapikey",
      "file_path": "trufflehog-main\\pkg\\detectors\\saladcloudapikey\\saladcloudapikey.go",
      "line_number": 25,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tapiKey        = regexp.MustCompile(`\\b(salad_cloud_[0-9A-Za-z]{1,7}_[0-9A-Za-z]{7,235})\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(salad_cloud_[0-9A-Za-z]{1,7}_[0-9A-Za-z]{7,235})\\b",
      "detector_name": "saladcloudapikey",
      "file_path": "trufflehog-main\\pkg\\detectors\\saladcloudapikey\\saladcloudapikey.go",
      "line_number": 25,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tapiKey        = regexp.MustCompile(`\\b(salad_cloud_[0-9A-Za-z]{1,7}_[0-9A-Za-z]{7,235})\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "apiKey"
    },
    {
      "pattern": "\\b00[a-zA-Z0-9]{13}![a-zA-Z0-9_.]{96}\\b",
      "detector_name": "salesforce",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforce\\salesforce.go",
      "line_number": 31,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\taccessTokenPat = regexp.MustCompile(`\\b00[a-zA-Z0-9]{13}![a-zA-Z0-9_.]{96}\\b`)\n\tinstancePat    = regexp.MustCompile(`\\bhttps://[0-9a-zA-Z-\\.]{1,100}\\.my\\.salesforce\\.com\\b`)\n)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b00[a-zA-Z0-9]{13}![a-zA-Z0-9_.]{96}\\b",
      "detector_name": "salesforce",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforce\\salesforce.go",
      "line_number": 31,
      "context": "\tdefaultClient = detectors.DetectorHttpClientWithNoLocalAddresses\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\taccessTokenPat = regexp.MustCompile(`\\b00[a-zA-Z0-9]{13}![a-zA-Z0-9_.]{96}\\b`)\n\tinstancePat    = regexp.MustCompile(`\\bhttps://[0-9a-zA-Z-\\.]{1,100}\\.my\\.salesforce\\.com\\b`)\n)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": "accessTokenPat"
    },
    {
      "pattern": "\\bhttps://[0-9a-zA-Z-\\.]{1,100}\\.my\\.salesforce\\.com\\b",
      "detector_name": "salesforce",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforce\\salesforce.go",
      "line_number": 32,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\taccessTokenPat = regexp.MustCompile(`\\b00[a-zA-Z0-9]{13}![a-zA-Z0-9_.]{96}\\b`)\n\tinstancePat    = regexp.MustCompile(`\\bhttps://[0-9a-zA-Z-\\.]{1,100}\\.my\\.salesforce\\.com\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bhttps://[0-9a-zA-Z-\\.]{1,100}\\.my\\.salesforce\\.com\\b",
      "detector_name": "salesforce",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforce\\salesforce.go",
      "line_number": 32,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\taccessTokenPat = regexp.MustCompile(`\\b00[a-zA-Z0-9]{13}![a-zA-Z0-9_.]{96}\\b`)\n\tinstancePat    = regexp.MustCompile(`\\bhttps://[0-9a-zA-Z-\\.]{1,100}\\.my\\.salesforce\\.com\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "instancePat"
    },
    {
      "pattern": "\\b(?:https?://)?([0-9a-zA-Z\\-\\.]{1,100}\\.my\\.salesforce\\.com)\\b",
      "detector_name": "salesforceoauth2",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforceoauth2\\salesforceoauth2.go",
      "line_number": 31,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tinstancePat       = regexp.MustCompile(`\\b(?:https?://)?([0-9a-zA-Z\\-\\.]{1,100}\\.my\\.salesforce\\.com)\\b`)\n\tconsumerKeyPat    = regexp.MustCompile(`\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})`)\n\tconsumerSecretPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"salesforce\", \"consumer\", \"secret\"}) + `\\b([A-Za-z0-9+/=.]{64}|[0-9]{19})\\b`)",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(?:https?://)?([0-9a-zA-Z\\-\\.]{1,100}\\.my\\.salesforce\\.com)\\b",
      "detector_name": "salesforceoauth2",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforceoauth2\\salesforceoauth2.go",
      "line_number": 31,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tinstancePat       = regexp.MustCompile(`\\b(?:https?://)?([0-9a-zA-Z\\-\\.]{1,100}\\.my\\.salesforce\\.com)\\b`)\n\tconsumerKeyPat    = regexp.MustCompile(`\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})`)\n\tconsumerSecretPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"salesforce\", \"consumer\", \"secret\"}) + `\\b([A-Za-z0-9+/=.]{64}|[0-9]{19})\\b`)",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "instancePat"
    },
    {
      "pattern": "\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})",
      "detector_name": "salesforceoauth2",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforceoauth2\\salesforceoauth2.go",
      "line_number": 32,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tinstancePat       = regexp.MustCompile(`\\b(?:https?://)?([0-9a-zA-Z\\-\\.]{1,100}\\.my\\.salesforce\\.com)\\b`)\n\tconsumerKeyPat    = regexp.MustCompile(`\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})`)\n\tconsumerSecretPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"salesforce\", \"consumer\", \"secret\"}) + `\\b([A-Za-z0-9+/=.]{64}|[0-9]{19})\\b`)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})",
      "detector_name": "salesforceoauth2",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforceoauth2\\salesforceoauth2.go",
      "line_number": 32,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tinstancePat       = regexp.MustCompile(`\\b(?:https?://)?([0-9a-zA-Z\\-\\.]{1,100}\\.my\\.salesforce\\.com)\\b`)\n\tconsumerKeyPat    = regexp.MustCompile(`\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})`)\n\tconsumerSecretPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"salesforce\", \"consumer\", \"secret\"}) + `\\b([A-Za-z0-9+/=.]{64}|[0-9]{19})\\b`)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "consumerKeyPat"
    },
    {
      "pattern": "(?i)\\b(5AEP861[a-zA-Z0-9._=]{80,})\\b",
      "detector_name": "salesforcerefreshtoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforcerefreshtoken\\salesforcerefreshtoken.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\trefreshTokenPat   = regexp.MustCompile(`(?i)\\b(5AEP861[a-zA-Z0-9._=]{80,})\\b`)\n\tconsumerKeyPat    = regexp.MustCompile(`\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})`)\n\tconsumerSecretPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"salesforce\", \"consumer\", \"secret\"}) + `\\b([A-Za-z0-9+/=.]{64}|[0-9]{19})\\b`)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)\\b(5AEP861[a-zA-Z0-9._=]{80,})\\b",
      "detector_name": "salesforcerefreshtoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforcerefreshtoken\\salesforcerefreshtoken.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\trefreshTokenPat   = regexp.MustCompile(`(?i)\\b(5AEP861[a-zA-Z0-9._=]{80,})\\b`)\n\tconsumerKeyPat    = regexp.MustCompile(`\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})`)\n\tconsumerSecretPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"salesforce\", \"consumer\", \"secret\"}) + `\\b([A-Za-z0-9+/=.]{64}|[0-9]{19})\\b`)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": "refreshTokenPat"
    },
    {
      "pattern": "\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})",
      "detector_name": "salesforcerefreshtoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforcerefreshtoken\\salesforcerefreshtoken.go",
      "line_number": 30,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\trefreshTokenPat   = regexp.MustCompile(`(?i)\\b(5AEP861[a-zA-Z0-9._=]{80,})\\b`)\n\tconsumerKeyPat    = regexp.MustCompile(`\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})`)\n\tconsumerSecretPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"salesforce\", \"consumer\", \"secret\"}) + `\\b([A-Za-z0-9+/=.]{64}|[0-9]{19})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})",
      "detector_name": "salesforcerefreshtoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\salesforcerefreshtoken\\salesforcerefreshtoken.go",
      "line_number": 30,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\trefreshTokenPat   = regexp.MustCompile(`(?i)\\b(5AEP861[a-zA-Z0-9._=]{80,})\\b`)\n\tconsumerKeyPat    = regexp.MustCompile(`\\b(3MVG9[0-9a-zA-Z._+/=]{80,251})`)\n\tconsumerSecretPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"salesforce\", \"consumer\", \"secret\"}) + `\\b([A-Za-z0-9+/=.]{64}|[0-9]{19})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "consumerKeyPat"
    },
    {
      "pattern": "\\b(api\\.(?:us|eu)-(?:west|east|central)-[0-9].saucelabs\\.com)\\b",
      "detector_name": "saucelabs",
      "file_path": "trufflehog-main\\pkg\\detectors\\saucelabs\\saucelabs.go",
      "line_number": 30,
      "context": "\tusernamePat = regexp.MustCompile(detectors.PrefixRegex([]string{\"saucelabs\", \"username\"}) + `\\b([a-zA-Z0-9_\\.-]{2,70})`)\n\tkeyPat      = regexp.MustCompile(detectors.PrefixRegex([]string{\"saucelabs\"}) + `\\b([a-z0-9]{8}\\-[a-z0-9]{4}\\-[a-z0-9]{4}\\-[a-z0-9]{4}\\-[a-z0-9]{12})\\b`)\n\tbaseUrlPat  = regexp.MustCompile(`\\b(api\\.(?:us|eu)-(?:west|east|central)-[0-9].saucelabs\\.com)\\b`)\n\n\tfixedBaseURL = \"api.us-west-1.saucelabs.com\"",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(api\\.(?:us|eu)-(?:west|east|central)-[0-9].saucelabs\\.com)\\b",
      "detector_name": "saucelabs",
      "file_path": "trufflehog-main\\pkg\\detectors\\saucelabs\\saucelabs.go",
      "line_number": 30,
      "context": "\tusernamePat = regexp.MustCompile(detectors.PrefixRegex([]string{\"saucelabs\", \"username\"}) + `\\b([a-zA-Z0-9_\\.-]{2,70})`)\n\tkeyPat      = regexp.MustCompile(detectors.PrefixRegex([]string{\"saucelabs\"}) + `\\b([a-z0-9]{8}\\-[a-z0-9]{4}\\-[a-z0-9]{4}\\-[a-z0-9]{4}\\-[a-z0-9]{12})\\b`)\n\tbaseUrlPat  = regexp.MustCompile(`\\b(api\\.(?:us|eu)-(?:west|east|central)-[0-9].saucelabs\\.com)\\b`)\n\n\tfixedBaseURL = \"api.us-west-1.saucelabs.com\"",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "baseUrlPat"
    },
    {
      "pattern": "\\bSG\\.[\\w\\-]{20,24}\\.[\\w\\-]{39,50}\\b",
      "detector_name": "sendgrid",
      "file_path": "trufflehog-main\\pkg\\detectors\\sendgrid\\sendgrid.go",
      "line_number": 29,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\bSG\\.[\\w\\-]{20,24}\\.[\\w\\-]{39,50}\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bSG\\.[\\w\\-]{20,24}\\.[\\w\\-]{39,50}\\b",
      "detector_name": "sendgrid",
      "file_path": "trufflehog-main\\pkg\\detectors\\sendgrid\\sendgrid.go",
      "line_number": 29,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\bSG\\.[\\w\\-]{20,24}\\.[\\w\\-]{39,50}\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(xkeysib\\-[A-Za-z0-9_-]{81})\\b",
      "detector_name": "sendinbluev2",
      "file_path": "trufflehog-main\\pkg\\detectors\\sendinbluev2\\sendinbluev2.go",
      "line_number": 22,
      "context": "\tclient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\b(xkeysib\\-[A-Za-z0-9_-]{81})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(xkeysib\\-[A-Za-z0-9_-]{81})\\b",
      "detector_name": "sendinbluev2",
      "file_path": "trufflehog-main\\pkg\\detectors\\sendinbluev2\\sendinbluev2.go",
      "line_number": 22,
      "context": "\tclient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\b(xkeysib\\-[A-Za-z0-9_-]{81})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(sntrys_eyJ[a-zA-Z0-9=_+/]{197})\\b",
      "detector_name": "sentryorgtoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\sentryorgtoken\\sentryorgtoken.go",
      "line_number": 25,
      "context": "var (\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\torgAuthTokenPat = regexp.MustCompile(`\\b(sntrys_eyJ[a-zA-Z0-9=_+/]{197})\\b`)\n)\n",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sntrys_eyJ[a-zA-Z0-9=_+/]{197})\\b",
      "detector_name": "sentryorgtoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\sentryorgtoken\\sentryorgtoken.go",
      "line_number": 25,
      "context": "var (\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\torgAuthTokenPat = regexp.MustCompile(`\\b(sntrys_eyJ[a-zA-Z0-9=_+/]{197})\\b`)\n)\n",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": "orgAuthTokenPat"
    },
    {
      "pattern": "\\b(sntryu_[a-f0-9]{64})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\sentrytoken\\v2\\sentrytoken.go",
      "line_number": 25,
      "context": "var (\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sntryu_[a-f0-9]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sntryu_[a-f0-9]{64})\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\sentrytoken\\v2\\sentrytoken.go",
      "line_number": 25,
      "context": "var (\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sntryu_[a-f0-9]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(shppa_|shpat_)([0-9A-Fa-f]{32})\\b",
      "detector_name": "shopify",
      "file_path": "trufflehog-main\\pkg\\detectors\\shopify\\shopify.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b(shppa_|shpat_)([0-9A-Fa-f]{32})\\b`)\n\tdomainPat = regexp.MustCompile(`[a-zA-Z0-9-]+\\.myshopify\\.com`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(shppa_|shpat_)([0-9A-Fa-f]{32})\\b",
      "detector_name": "shopify",
      "file_path": "trufflehog-main\\pkg\\detectors\\shopify\\shopify.go",
      "line_number": 27,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b(shppa_|shpat_)([0-9A-Fa-f]{32})\\b`)\n\tdomainPat = regexp.MustCompile(`[a-zA-Z0-9-]+\\.myshopify\\.com`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "[a-zA-Z0-9-]+\\.myshopify\\.com",
      "detector_name": "shopify",
      "file_path": "trufflehog-main\\pkg\\detectors\\shopify\\shopify.go",
      "line_number": 28,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b(shppa_|shpat_)([0-9A-Fa-f]{32})\\b`)\n\tdomainPat = regexp.MustCompile(`[a-zA-Z0-9-]+\\.myshopify\\.com`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "[a-zA-Z0-9-]+\\.myshopify\\.com",
      "detector_name": "shopify",
      "file_path": "trufflehog-main\\pkg\\detectors\\shopify\\shopify.go",
      "line_number": 28,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(`\\b(shppa_|shpat_)([0-9A-Fa-f]{32})\\b`)\n\tdomainPat = regexp.MustCompile(`[a-zA-Z0-9-]+\\.myshopify\\.com`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "domainPat"
    },
    {
      "pattern": "(?i)([a-z]{2})signable",
      "detector_name": "signable",
      "file_path": "trufflehog-main\\pkg\\detectors\\signable\\signable.go",
      "line_number": 29,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\ttokenPat   = regexp.MustCompile(detectors.PrefixRegex([]string{\".{0,2}signable\"}) + `\\b([a-zA-Z-0-9]{32})\\b`)\n\tkeywordPat = regexp.MustCompile(`(?i)([a-z]{2})signable`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)([a-z]{2})signable",
      "detector_name": "signable",
      "file_path": "trufflehog-main\\pkg\\detectors\\signable\\signable.go",
      "line_number": 29,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\ttokenPat   = regexp.MustCompile(detectors.PrefixRegex([]string{\".{0,2}signable\"}) + `\\b([a-zA-Z-0-9]{32})\\b`)\n\tkeywordPat = regexp.MustCompile(`(?i)([a-z]{2})signable`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "keywordPat"
    },
    {
      "pattern": "\\b([0-9a-z-]{3,64}\\.signalwire\\.com)\\b",
      "detector_name": "signalwire",
      "file_path": "trufflehog-main\\pkg\\detectors\\signalwire\\signalwire.go",
      "line_number": 29,
      "context": "\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"signalwire\"}) + `\\b([0-9A-Za-z]{50})\\b`)\n\tidPat  = regexp.MustCompile(detectors.PrefixRegex([]string{\"signalwire\"}) + `\\b([0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12})\\b`)\n\turlPat = regexp.MustCompile(`\\b([0-9a-z-]{3,64}\\.signalwire\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([0-9a-z-]{3,64}\\.signalwire\\.com)\\b",
      "detector_name": "signalwire",
      "file_path": "trufflehog-main\\pkg\\detectors\\signalwire\\signalwire.go",
      "line_number": 29,
      "context": "\tkeyPat = regexp.MustCompile(detectors.PrefixRegex([]string{\"signalwire\"}) + `\\b([0-9A-Za-z]{50})\\b`)\n\tidPat  = regexp.MustCompile(detectors.PrefixRegex([]string{\"signalwire\"}) + `\\b([0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12})\\b`)\n\turlPat = regexp.MustCompile(`\\b([0-9a-z-]{3,64}\\.signalwire\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "xoxb\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*",
      "detector_name": "slack",
      "file_path": "trufflehog-main\\pkg\\detectors\\slack\\slack.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\ttokenPats     = map[string]*regexp.Regexp{\n\t\t\"Slack Bot Token\":               regexp.MustCompile(`xoxb\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t\t\"Slack User Token\":              regexp.MustCompile(`xoxp\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t\t\"Slack Workspace Access Token\":  regexp.MustCompile(`xoxa\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "xoxp\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*",
      "detector_name": "slack",
      "file_path": "trufflehog-main\\pkg\\detectors\\slack\\slack.go",
      "line_number": 29,
      "context": "\ttokenPats     = map[string]*regexp.Regexp{\n\t\t\"Slack Bot Token\":               regexp.MustCompile(`xoxb\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t\t\"Slack User Token\":              regexp.MustCompile(`xoxp\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t\t\"Slack Workspace Access Token\":  regexp.MustCompile(`xoxa\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t\t\"Slack Workspace Refresh Token\": regexp.MustCompile(`xoxr\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "xoxa\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*",
      "detector_name": "slack",
      "file_path": "trufflehog-main\\pkg\\detectors\\slack\\slack.go",
      "line_number": 30,
      "context": "\t\t\"Slack Bot Token\":               regexp.MustCompile(`xoxb\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t\t\"Slack User Token\":              regexp.MustCompile(`xoxp\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t\t\"Slack Workspace Access Token\":  regexp.MustCompile(`xoxa\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t\t\"Slack Workspace Refresh Token\": regexp.MustCompile(`xoxr\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t}",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "xoxr\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*",
      "detector_name": "slack",
      "file_path": "trufflehog-main\\pkg\\detectors\\slack\\slack.go",
      "line_number": 31,
      "context": "\t\t\"Slack User Token\":              regexp.MustCompile(`xoxp\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t\t\"Slack Workspace Access Token\":  regexp.MustCompile(`xoxa\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t\t\"Slack Workspace Refresh Token\": regexp.MustCompile(`xoxr\\-[0-9]{10,13}\\-[0-9]{10,13}[a-zA-Z0-9\\-]*`),\n\t}\n\tverifyURL = \"https://slack.com/api/auth.test\"",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(https://hooks\\.slack\\.com/services/T[A-Z0-9]+/B[A-Z0-9]+/[A-Za-z0-9]{23,25})",
      "detector_name": "slackwebhook",
      "file_path": "trufflehog-main\\pkg\\detectors\\slackwebhook\\slackwebhook.go",
      "line_number": 29,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPats = map[string]*regexp.Regexp{\n\t\t\"Slack Service Web Hook\":   regexp.MustCompile(`(https://hooks\\.slack\\.com/services/T[A-Z0-9]+/B[A-Z0-9]+/[A-Za-z0-9]{23,25})`),\n\t\t\"Slack Workflow Web Hook \": regexp.MustCompile(`(https://hooks\\.slack\\.com/workflows/T[A-Z0-9]+/A[A-Z0-9]+/[0-9]{17,19}/[A-Za-z0-9]{23,25})`),\n\t}",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(https://hooks\\.slack\\.com/workflows/T[A-Z0-9]+/A[A-Z0-9]+/[0-9]{17,19}/[A-Za-z0-9]{23,25})",
      "detector_name": "slackwebhook",
      "file_path": "trufflehog-main\\pkg\\detectors\\slackwebhook\\slackwebhook.go",
      "line_number": 30,
      "context": "\tkeyPats = map[string]*regexp.Regexp{\n\t\t\"Slack Service Web Hook\":   regexp.MustCompile(`(https://hooks\\.slack\\.com/services/T[A-Z0-9]+/B[A-Z0-9]+/[A-Za-z0-9]{23,25})`),\n\t\t\"Slack Workflow Web Hook \": regexp.MustCompile(`(https://hooks\\.slack\\.com/workflows/T[A-Z0-9]+/A[A-Z0-9]+/[0-9]{17,19}/[A-Za-z0-9]{23,25})`),\n\t}\n)",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sgp_(?:[a-fA-F0-9]{16}|local)_[a-fA-F0-9]{40}|sgp_[a-fA-F0-9]{40}|[a-fA-F0-9]{40})\\b",
      "detector_name": "sourcegraph",
      "file_path": "trufflehog-main\\pkg\\detectors\\sourcegraph\\sourcegraph.go",
      "line_number": 26,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sgp_(?:[a-fA-F0-9]{16}|local)_[a-fA-F0-9]{40}|sgp_[a-fA-F0-9]{40}|[a-fA-F0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sgp_(?:[a-fA-F0-9]{16}|local)_[a-fA-F0-9]{40}|sgp_[a-fA-F0-9]{40}|[a-fA-F0-9]{40})\\b",
      "detector_name": "sourcegraph",
      "file_path": "trufflehog-main\\pkg\\detectors\\sourcegraph\\sourcegraph.go",
      "line_number": 26,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sgp_(?:[a-fA-F0-9]{16}|local)_[a-fA-F0-9]{40}|sgp_[a-fA-F0-9]{40}|[a-fA-F0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(slk_[a-f0-9]{64})\\b",
      "detector_name": "sourcegraphcody",
      "file_path": "trufflehog-main\\pkg\\detectors\\sourcegraphcody\\sourcegraphcody.go",
      "line_number": 26,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(slk_[a-f0-9]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(slk_[a-f0-9]{64})\\b",
      "detector_name": "sourcegraphcody",
      "file_path": "trufflehog-main\\pkg\\detectors\\sourcegraphcody\\sourcegraphcody.go",
      "line_number": 26,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(slk_[a-f0-9]{64})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9]{40})\\b",
      "detector_name": "sparkpost",
      "file_path": "trufflehog-main\\pkg\\detectors\\sparkpost\\sparkpost.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([a-zA-Z0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9]{40})\\b",
      "detector_name": "sparkpost",
      "file_path": "trufflehog-main\\pkg\\detectors\\sparkpost\\sparkpost.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b([a-zA-Z0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(?:sandbox-)?sq0i[a-z]{2}-[0-9A-Za-z_-]{22,43}",
      "detector_name": "squareapp",
      "file_path": "trufflehog-main\\pkg\\detectors\\squareapp\\squareapp.go",
      "line_number": 32,
      "context": "\t\tpossibly always `sq0csp` for secret and `sq0idb` for app\n\t*/\n\tkeyPat = regexp.MustCompile(`(?:sandbox-)?sq0i[a-z]{2}-[0-9A-Za-z_-]{22,43}`)\n\tsecPat = regexp.MustCompile(`(?:sandbox-)?sq0c[a-z]{2}-[0-9A-Za-z_-]{40,50}`)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?:sandbox-)?sq0i[a-z]{2}-[0-9A-Za-z_-]{22,43}",
      "detector_name": "squareapp",
      "file_path": "trufflehog-main\\pkg\\detectors\\squareapp\\squareapp.go",
      "line_number": 32,
      "context": "\t\tpossibly always `sq0csp` for secret and `sq0idb` for app\n\t*/\n\tkeyPat = regexp.MustCompile(`(?:sandbox-)?sq0i[a-z]{2}-[0-9A-Za-z_-]{22,43}`)\n\tsecPat = regexp.MustCompile(`(?:sandbox-)?sq0c[a-z]{2}-[0-9A-Za-z_-]{40,50}`)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(?:sandbox-)?sq0c[a-z]{2}-[0-9A-Za-z_-]{40,50}",
      "detector_name": "squareapp",
      "file_path": "trufflehog-main\\pkg\\detectors\\squareapp\\squareapp.go",
      "line_number": 33,
      "context": "\t*/\n\tkeyPat = regexp.MustCompile(`(?:sandbox-)?sq0i[a-z]{2}-[0-9A-Za-z_-]{22,43}`)\n\tsecPat = regexp.MustCompile(`(?:sandbox-)?sq0c[a-z]{2}-[0-9A-Za-z_-]{40,50}`)\n\n\t// api endpoints",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?:sandbox-)?sq0c[a-z]{2}-[0-9A-Za-z_-]{40,50}",
      "detector_name": "squareapp",
      "file_path": "trufflehog-main\\pkg\\detectors\\squareapp\\squareapp.go",
      "line_number": 33,
      "context": "\t*/\n\tkeyPat = regexp.MustCompile(`(?:sandbox-)?sq0i[a-z]{2}-[0-9A-Za-z_-]{22,43}`)\n\tsecPat = regexp.MustCompile(`(?:sandbox-)?sq0c[a-z]{2}-[0-9A-Za-z_-]{40,50}`)\n\n\t// api endpoints",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "secPat"
    },
    {
      "pattern": "\\b(sq0idp-[0-9A-Za-z]{22})\\b",
      "detector_name": "squareup",
      "file_path": "trufflehog-main\\pkg\\detectors\\squareup\\squareup.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sq0idp-[0-9A-Za-z]{22})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sq0idp-[0-9A-Za-z]{22})\\b",
      "detector_name": "squareup",
      "file_path": "trufflehog-main\\pkg\\detectors\\squareup\\squareup.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sq0idp-[0-9A-Za-z]{22})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "[rs]k_live_[a-zA-Z0-9]{20,247}",
      "detector_name": "stripe",
      "file_path": "trufflehog-main\\pkg\\detectors\\stripe\\stripe.go",
      "line_number": 22,
      "context": "var (\n\t// doesn't include test keys with \"sk_test\"\n\tsecretKey = regexp.MustCompile(`[rs]k_live_[a-zA-Z0-9]{20,247}`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "[rs]k_live_[a-zA-Z0-9]{20,247}",
      "detector_name": "stripe",
      "file_path": "trufflehog-main\\pkg\\detectors\\stripe\\stripe.go",
      "line_number": 22,
      "context": "var (\n\t// doesn't include test keys with \"sk_test\"\n\tsecretKey = regexp.MustCompile(`[rs]k_live_[a-zA-Z0-9]{20,247}`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "secretKey"
    },
    {
      "pattern": "\\b(pi_[a-zA-Z0-9]{24}_secret_[a-zA-Z0-9]{25})\\b",
      "detector_name": "stripepaymentintent",
      "file_path": "trufflehog-main\\pkg\\detectors\\stripepaymentintent\\stripepaymentintent.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tclientSecretPat   = regexp.MustCompile(`\\b(pi_[a-zA-Z0-9]{24}_secret_[a-zA-Z0-9]{25})\\b`)\n\tsecretKeyPat      = regexp.MustCompile(`\\b([rs]k_live_[a-zA-Z0-9]{20,247})\\b`)\n\tpublishableKeyPat = regexp.MustCompile(`\\b(pk_live_[a-zA-Z0-9]{20,247})\\b`)",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(pi_[a-zA-Z0-9]{24}_secret_[a-zA-Z0-9]{25})\\b",
      "detector_name": "stripepaymentintent",
      "file_path": "trufflehog-main\\pkg\\detectors\\stripepaymentintent\\stripepaymentintent.go",
      "line_number": 29,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tclientSecretPat   = regexp.MustCompile(`\\b(pi_[a-zA-Z0-9]{24}_secret_[a-zA-Z0-9]{25})\\b`)\n\tsecretKeyPat      = regexp.MustCompile(`\\b([rs]k_live_[a-zA-Z0-9]{20,247})\\b`)\n\tpublishableKeyPat = regexp.MustCompile(`\\b(pk_live_[a-zA-Z0-9]{20,247})\\b`)",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "clientSecretPat"
    },
    {
      "pattern": "\\b([rs]k_live_[a-zA-Z0-9]{20,247})\\b",
      "detector_name": "stripepaymentintent",
      "file_path": "trufflehog-main\\pkg\\detectors\\stripepaymentintent\\stripepaymentintent.go",
      "line_number": 30,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tclientSecretPat   = regexp.MustCompile(`\\b(pi_[a-zA-Z0-9]{24}_secret_[a-zA-Z0-9]{25})\\b`)\n\tsecretKeyPat      = regexp.MustCompile(`\\b([rs]k_live_[a-zA-Z0-9]{20,247})\\b`)\n\tpublishableKeyPat = regexp.MustCompile(`\\b(pk_live_[a-zA-Z0-9]{20,247})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([rs]k_live_[a-zA-Z0-9]{20,247})\\b",
      "detector_name": "stripepaymentintent",
      "file_path": "trufflehog-main\\pkg\\detectors\\stripepaymentintent\\stripepaymentintent.go",
      "line_number": 30,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tclientSecretPat   = regexp.MustCompile(`\\b(pi_[a-zA-Z0-9]{24}_secret_[a-zA-Z0-9]{25})\\b`)\n\tsecretKeyPat      = regexp.MustCompile(`\\b([rs]k_live_[a-zA-Z0-9]{20,247})\\b`)\n\tpublishableKeyPat = regexp.MustCompile(`\\b(pk_live_[a-zA-Z0-9]{20,247})\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "secretKeyPat"
    },
    {
      "pattern": "\\b(pk_live_[a-zA-Z0-9]{20,247})\\b",
      "detector_name": "stripepaymentintent",
      "file_path": "trufflehog-main\\pkg\\detectors\\stripepaymentintent\\stripepaymentintent.go",
      "line_number": 31,
      "context": "\tclientSecretPat   = regexp.MustCompile(`\\b(pi_[a-zA-Z0-9]{24}_secret_[a-zA-Z0-9]{25})\\b`)\n\tsecretKeyPat      = regexp.MustCompile(`\\b([rs]k_live_[a-zA-Z0-9]{20,247})\\b`)\n\tpublishableKeyPat = regexp.MustCompile(`\\b(pk_live_[a-zA-Z0-9]{20,247})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(pk_live_[a-zA-Z0-9]{20,247})\\b",
      "detector_name": "stripepaymentintent",
      "file_path": "trufflehog-main\\pkg\\detectors\\stripepaymentintent\\stripepaymentintent.go",
      "line_number": 31,
      "context": "\tclientSecretPat   = regexp.MustCompile(`\\b(pi_[a-zA-Z0-9]{24}_secret_[a-zA-Z0-9]{25})\\b`)\n\tsecretKeyPat      = regexp.MustCompile(`\\b([rs]k_live_[a-zA-Z0-9]{20,247})\\b`)\n\tpublishableKeyPat = regexp.MustCompile(`\\b(pk_live_[a-zA-Z0-9]{20,247})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "publishableKeyPat"
    },
    {
      "pattern": "(?i)api\\.(?:au|ca|de|eu|fed|jp|kr|in|us2)\\.sumologic\\.com",
      "detector_name": "sumologickey",
      "file_path": "trufflehog-main\\pkg\\detectors\\sumologickey\\sumologickey.go",
      "line_number": 34,
      "context": "\t// Detect which instance the key is associated with.\n\t// https://help.sumologic.com/docs/api/getting-started/#documentation\n\turlPat = regexp.MustCompile(`(?i)api\\.(?:au|ca|de|eu|fed|jp|kr|in|us2)\\.sumologic\\.com`)\n\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)api\\.(?:au|ca|de|eu|fed|jp|kr|in|us2)\\.sumologic\\.com",
      "detector_name": "sumologickey",
      "file_path": "trufflehog-main\\pkg\\detectors\\sumologickey\\sumologickey.go",
      "line_number": 34,
      "context": "\t// Detect which instance the key is associated with.\n\t// https://help.sumologic.com/docs/api/getting-started/#documentation\n\turlPat = regexp.MustCompile(`(?i)api\\.(?:au|ca|de|eu|fed|jp|kr|in|us2)\\.sumologic\\.com`)\n\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "urlPat"
    },
    {
      "pattern": "\\b(sbp_[a-z0-9]{40})\\b",
      "detector_name": "supabasetoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\supabasetoken\\supabasetoken.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sbp_[a-z0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(sbp_[a-z0-9]{40})\\b",
      "detector_name": "supabasetoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\supabasetoken\\supabasetoken.go",
      "line_number": 24,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(sbp_[a-z0-9]{40})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([A-Za-z0-9+/]{22}==:[A-Za-z0-9]{32})\\b",
      "detector_name": "tableau",
      "file_path": "trufflehog-main\\pkg\\detectors\\tableau\\tableau.go",
      "line_number": 39,
      "context": "\n\t// Pattern for Personal Access Token Secrets\n\ttokenSecretPat = regexp.MustCompile(`\\b([A-Za-z0-9+/]{22}==:[A-Za-z0-9]{32})\\b`)\n\n\t// Simplified Tableau Server URLs pattern",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([A-Za-z0-9+/]{22}==:[A-Za-z0-9]{32})\\b",
      "detector_name": "tableau",
      "file_path": "trufflehog-main\\pkg\\detectors\\tableau\\tableau.go",
      "line_number": 39,
      "context": "\n\t// Pattern for Personal Access Token Secrets\n\ttokenSecretPat = regexp.MustCompile(`\\b([A-Za-z0-9+/]{22}==:[A-Za-z0-9]{32})\\b`)\n\n\t// Simplified Tableau Server URLs pattern",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "tokenSecretPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9\\-]+\\.online\\.tableau\\.com)\\b",
      "detector_name": "tableau",
      "file_path": "trufflehog-main\\pkg\\detectors\\tableau\\tableau.go",
      "line_number": 42,
      "context": "\n\t// Simplified Tableau Server URLs pattern\n\ttableauURLPat = regexp.MustCompile(`\\b([a-zA-Z0-9\\-]+\\.online\\.tableau\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9\\-]+\\.online\\.tableau\\.com)\\b",
      "detector_name": "tableau",
      "file_path": "trufflehog-main\\pkg\\detectors\\tableau\\tableau.go",
      "line_number": 42,
      "context": "\n\t// Simplified Tableau Server URLs pattern\n\ttableauURLPat = regexp.MustCompile(`\\b([a-zA-Z0-9\\-]+\\.online\\.tableau\\.com)\\b`)\n)\n",
      "pattern_type": "urlPat",
      "is_compiled": true,
      "variable_name": "tableauURLPat"
    },
    {
      "pattern": "\\btskey-[a-z]+-[0-9A-Za-z_]+-[0-9A-Za-z_]+\\b",
      "detector_name": "tailscale",
      "file_path": "trufflehog-main\\pkg\\detectors\\tailscale\\tailscale.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\btskey-[a-z]+-[0-9A-Za-z_]+-[0-9A-Za-z_]+\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\btskey-[a-z]+-[0-9A-Za-z_]+-[0-9A-Za-z_]+\\b",
      "detector_name": "tailscale",
      "file_path": "trufflehog-main\\pkg\\detectors\\tailscale\\tailscale.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\btskey-[a-z]+-[0-9A-Za-z_]+-[0-9A-Za-z_]+\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([A-Za-z0-9]{14}.atlasv1.[A-Za-z0-9]{67})\\b",
      "detector_name": "terraformcloudpersonaltoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\terraformcloudpersonaltoken\\terraformcloudpersonaltoken.go",
      "line_number": 24,
      "context": "\tclient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\b([A-Za-z0-9]{14}.atlasv1.[A-Za-z0-9]{67})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([A-Za-z0-9]{14}.atlasv1.[A-Za-z0-9]{67})\\b",
      "detector_name": "terraformcloudpersonaltoken",
      "file_path": "trufflehog-main\\pkg\\detectors\\terraformcloudpersonaltoken\\terraformcloudpersonaltoken.go",
      "line_number": 24,
      "context": "\tclient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\b([A-Za-z0-9]{14}.atlasv1.[A-Za-z0-9]{67})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(https://[\\w-]+\\.tines\\.com/webhook/[a-z0-9]{32}/[a-z0-9]{32})",
      "detector_name": "tineswebhook",
      "file_path": "trufflehog-main\\pkg\\detectors\\tineswebhook\\tineswebhook.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(https://[\\w-]+\\.tines\\.com/webhook/[a-z0-9]{32}/[a-z0-9]{32})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(https://[\\w-]+\\.tines\\.com/webhook/[a-z0-9]{32}/[a-z0-9]{32})",
      "detector_name": "tineswebhook",
      "file_path": "trufflehog-main\\pkg\\detectors\\tineswebhook\\tineswebhook.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(https://[\\w-]+\\.tines\\.com/webhook/[a-z0-9]{32}/[a-z0-9]{32})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([a-zA-Z-0-9]{64})\\b",
      "detector_name": "trelloapikey",
      "file_path": "trufflehog-main\\pkg\\detectors\\trelloapikey\\trelloapikey.go",
      "line_number": 23,
      "context": "var (\n\tclient   = common.SaneHttpClient()\n\ttokenPat = regexp.MustCompile(`\\b([a-zA-Z-0-9]{64})\\b`)\n\tkeyPat   = regexp.MustCompile(detectors.PrefixRegex([]string{\"trello\"}) + `\\b([a-zA-Z-0-9]{32})\\b`)\n)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z-0-9]{64})\\b",
      "detector_name": "trelloapikey",
      "file_path": "trufflehog-main\\pkg\\detectors\\trelloapikey\\trelloapikey.go",
      "line_number": 23,
      "context": "var (\n\tclient   = common.SaneHttpClient()\n\ttokenPat = regexp.MustCompile(`\\b([a-zA-Z-0-9]{64})\\b`)\n\tkeyPat   = regexp.MustCompile(detectors.PrefixRegex([]string{\"trello\"}) + `\\b([a-zA-Z-0-9]{32})\\b`)\n)",
      "pattern_type": "tokenPat",
      "is_compiled": true,
      "variable_name": "tokenPat"
    },
    {
      "pattern": "\\bthog-key-[0-9a-f]{16}\\b",
      "detector_name": "trufflehogenterprise",
      "file_path": "trufflehog-main\\pkg\\detectors\\trufflehogenterprise\\trufflehogenterprise.go",
      "line_number": 26,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat      = regexp.MustCompile(`\\bthog-key-[0-9a-f]{16}\\b`)\n\tsecretPat   = regexp.MustCompile(`\\bthog-secret-[0-9a-f]{32}\\b`)\n\thostnamePat = regexp.MustCompile(`\\b[a-z]+-[a-z]+-[a-z]+\\.[a-z][0-9]\\.[a-z]+\\.trufflehog\\.org\\b`)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bthog-key-[0-9a-f]{16}\\b",
      "detector_name": "trufflehogenterprise",
      "file_path": "trufflehog-main\\pkg\\detectors\\trufflehogenterprise\\trufflehogenterprise.go",
      "line_number": 26,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat      = regexp.MustCompile(`\\bthog-key-[0-9a-f]{16}\\b`)\n\tsecretPat   = regexp.MustCompile(`\\bthog-secret-[0-9a-f]{32}\\b`)\n\thostnamePat = regexp.MustCompile(`\\b[a-z]+-[a-z]+-[a-z]+\\.[a-z][0-9]\\.[a-z]+\\.trufflehog\\.org\\b`)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\bthog-secret-[0-9a-f]{32}\\b",
      "detector_name": "trufflehogenterprise",
      "file_path": "trufflehog-main\\pkg\\detectors\\trufflehogenterprise\\trufflehogenterprise.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat      = regexp.MustCompile(`\\bthog-key-[0-9a-f]{16}\\b`)\n\tsecretPat   = regexp.MustCompile(`\\bthog-secret-[0-9a-f]{32}\\b`)\n\thostnamePat = regexp.MustCompile(`\\b[a-z]+-[a-z]+-[a-z]+\\.[a-z][0-9]\\.[a-z]+\\.trufflehog\\.org\\b`)\n)",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bthog-secret-[0-9a-f]{32}\\b",
      "detector_name": "trufflehogenterprise",
      "file_path": "trufflehog-main\\pkg\\detectors\\trufflehogenterprise\\trufflehogenterprise.go",
      "line_number": 27,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat      = regexp.MustCompile(`\\bthog-key-[0-9a-f]{16}\\b`)\n\tsecretPat   = regexp.MustCompile(`\\bthog-secret-[0-9a-f]{32}\\b`)\n\thostnamePat = regexp.MustCompile(`\\b[a-z]+-[a-z]+-[a-z]+\\.[a-z][0-9]\\.[a-z]+\\.trufflehog\\.org\\b`)\n)",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "secretPat"
    },
    {
      "pattern": "\\b[a-z]+-[a-z]+-[a-z]+\\.[a-z][0-9]\\.[a-z]+\\.trufflehog\\.org\\b",
      "detector_name": "trufflehogenterprise",
      "file_path": "trufflehog-main\\pkg\\detectors\\trufflehogenterprise\\trufflehogenterprise.go",
      "line_number": 28,
      "context": "\tkeyPat      = regexp.MustCompile(`\\bthog-key-[0-9a-f]{16}\\b`)\n\tsecretPat   = regexp.MustCompile(`\\bthog-secret-[0-9a-f]{32}\\b`)\n\thostnamePat = regexp.MustCompile(`\\b[a-z]+-[a-z]+-[a-z]+\\.[a-z][0-9]\\.[a-z]+\\.trufflehog\\.org\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b[a-z]+-[a-z]+-[a-z]+\\.[a-z][0-9]\\.[a-z]+\\.trufflehog\\.org\\b",
      "detector_name": "trufflehogenterprise",
      "file_path": "trufflehog-main\\pkg\\detectors\\trufflehogenterprise\\trufflehogenterprise.go",
      "line_number": 28,
      "context": "\tkeyPat      = regexp.MustCompile(`\\bthog-key-[0-9a-f]{16}\\b`)\n\tsecretPat   = regexp.MustCompile(`\\bthog-secret-[0-9a-f]{32}\\b`)\n\thostnamePat = regexp.MustCompile(`\\b[a-z]+-[a-z]+-[a-z]+\\.[a-z][0-9]\\.[a-z]+\\.trufflehog\\.org\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "hostnamePat"
    },
    {
      "pattern": "\\bAC[0-9a-f]{32}\\b",
      "detector_name": "twilio",
      "file_path": "trufflehog-main\\pkg\\detectors\\twilio\\twilio.go",
      "line_number": 27,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tsidPat        = regexp.MustCompile(`\\bAC[0-9a-f]{32}\\b`)\n\tkeyPat        = regexp.MustCompile(`\\b[0-9a-f]{32}\\b`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bAC[0-9a-f]{32}\\b",
      "detector_name": "twilio",
      "file_path": "trufflehog-main\\pkg\\detectors\\twilio\\twilio.go",
      "line_number": 27,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tsidPat        = regexp.MustCompile(`\\bAC[0-9a-f]{32}\\b`)\n\tkeyPat        = regexp.MustCompile(`\\b[0-9a-f]{32}\\b`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": "sidPat"
    },
    {
      "pattern": "\\b[0-9a-f]{32}\\b",
      "detector_name": "twilio",
      "file_path": "trufflehog-main\\pkg\\detectors\\twilio\\twilio.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\tsidPat        = regexp.MustCompile(`\\bAC[0-9a-f]{32}\\b`)\n\tkeyPat        = regexp.MustCompile(`\\b[0-9a-f]{32}\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b[0-9a-f]{32}\\b",
      "detector_name": "twilio",
      "file_path": "trufflehog-main\\pkg\\detectors\\twilio\\twilio.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\tsidPat        = regexp.MustCompile(`\\bAC[0-9a-f]{32}\\b`)\n\tkeyPat        = regexp.MustCompile(`\\b[0-9a-f]{32}\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\bSK[a-zA-Z0-9]{32}\\b",
      "detector_name": "twilioapikey",
      "file_path": "trufflehog-main\\pkg\\detectors\\twilioapikey\\twilioapikey.go",
      "line_number": 27,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tapiKeyPat     = regexp.MustCompile(`\\bSK[a-zA-Z0-9]{32}\\b`)\n\tsecretPat     = regexp.MustCompile(`\\b[0-9a-zA-Z]{32}\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bSK[a-zA-Z0-9]{32}\\b",
      "detector_name": "twilioapikey",
      "file_path": "trufflehog-main\\pkg\\detectors\\twilioapikey\\twilioapikey.go",
      "line_number": 27,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tapiKeyPat     = regexp.MustCompile(`\\bSK[a-zA-Z0-9]{32}\\b`)\n\tsecretPat     = regexp.MustCompile(`\\b[0-9a-zA-Z]{32}\\b`)\n)",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "apiKeyPat"
    },
    {
      "pattern": "\\b[0-9a-zA-Z]{32}\\b",
      "detector_name": "twilioapikey",
      "file_path": "trufflehog-main\\pkg\\detectors\\twilioapikey\\twilioapikey.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\tapiKeyPat     = regexp.MustCompile(`\\bSK[a-zA-Z0-9]{32}\\b`)\n\tsecretPat     = regexp.MustCompile(`\\b[0-9a-zA-Z]{32}\\b`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b[0-9a-zA-Z]{32}\\b",
      "detector_name": "twilioapikey",
      "file_path": "trufflehog-main\\pkg\\detectors\\twilioapikey\\twilioapikey.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\tapiKeyPat     = regexp.MustCompile(`\\bSK[a-zA-Z0-9]{32}\\b`)\n\tsecretPat     = regexp.MustCompile(`\\b[0-9a-zA-Z]{32}\\b`)\n)\n",
      "pattern_type": "secretPat",
      "is_compiled": true,
      "variable_name": "secretPat"
    },
    {
      "pattern": "\\btfp_[a-zA-Z0-9_]{40,59}\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\typeform\\v2\\typeform.go",
      "line_number": 27,
      "context": "\tclient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\btfp_[a-zA-Z0-9_]{40,59}\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\btfp_[a-zA-Z0-9_]{40,59}\\b",
      "detector_name": "v2",
      "file_path": "trufflehog-main\\pkg\\detectors\\typeform\\v2\\typeform.go",
      "line_number": 27,
      "context": "\tclient = common.SaneHttpClient()\n\n\tkeyPat = regexp.MustCompile(`\\btfp_[a-zA-Z0-9_]{40,59}\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(BBFF-[0-9a-zA-Z]{30})\\b",
      "detector_name": "ubidots",
      "file_path": "trufflehog-main\\pkg\\detectors\\ubidots\\ubidots.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(BBFF-[0-9a-zA-Z]{30})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(BBFF-[0-9a-zA-Z]{30})\\b",
      "detector_name": "ubidots",
      "file_path": "trufflehog-main\\pkg\\detectors\\ubidots\\ubidots.go",
      "line_number": 23,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(BBFF-[0-9a-zA-Z]{30})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\bhttps?:\\/\\/[\\w!#$%&()*+,\\-./;<=>?@[\\\\\\]^_{|}~]{0,50}:([\\w!#$%&()*+,\\-./:;<=>?[\\\\\\]^_{|}~]{3,50})@[a-zA-Z0-9.-]+(?:\\.[a-zA-Z]{2,})?(?::\\d{1,5})?[\\w/]+\\b",
      "detector_name": "uri",
      "file_path": "trufflehog-main\\pkg\\detectors\\uri\\uri.go",
      "line_number": 33,
      "context": "\nvar (\n\tkeyPat = regexp.MustCompile(`\\bhttps?:\\/\\/[\\w!#$%&()*+,\\-./;<=>?@[\\\\\\]^_{|}~]{0,50}:([\\w!#$%&()*+,\\-./:;<=>?[\\\\\\]^_{|}~]{3,50})@[a-zA-Z0-9.-]+(?:\\.[a-zA-Z]{2,})?(?::\\d{1,5})?[\\w/]+\\b`)\n\n\t// TODO: make local addr opt-out",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\bhttps?:\\/\\/[\\w!#$%&()*+,\\-./;<=>?@[\\\\\\]^_{|}~]{0,50}:([\\w!#$%&()*+,\\-./:;<=>?[\\\\\\]^_{|}~]{3,50})@[a-zA-Z0-9.-]+(?:\\.[a-zA-Z]{2,})?(?::\\d{1,5})?[\\w/]+\\b",
      "detector_name": "uri",
      "file_path": "trufflehog-main\\pkg\\detectors\\uri\\uri.go",
      "line_number": 33,
      "context": "\nvar (\n\tkeyPat = regexp.MustCompile(`\\bhttps?:\\/\\/[\\w!#$%&()*+,\\-./;<=>?@[\\\\\\]^_{|}~]{0,50}:([\\w!#$%&()*+,\\-./:;<=>?[\\\\\\]^_{|}~]{3,50})@[a-zA-Z0-9.-]+(?:\\.[a-zA-Z]{2,})?(?::\\d{1,5})?[\\w/]+\\b`)\n\n\t// TODO: make local addr opt-out",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(VF\\.(?:(?:DM|WS)\\.)?[a-fA-F0-9]{24}\\.[a-zA-Z0-9]{16})\\b",
      "detector_name": "voiceflow",
      "file_path": "trufflehog-main\\pkg\\detectors\\voiceflow\\voiceflow.go",
      "line_number": 30,
      "context": "\t// TODO: This includes Workspace and Legacy Workspace API keys; I haven't validated whether these actually work.\n\t// https://github.com/voiceflow/general-runtime/blob/master/tests/runtime/lib/DataAPI/utils.unit.ts\n\tkeyPat = regexp.MustCompile(`\\b(VF\\.(?:(?:DM|WS)\\.)?[a-fA-F0-9]{24}\\.[a-zA-Z0-9]{16})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(VF\\.(?:(?:DM|WS)\\.)?[a-fA-F0-9]{24}\\.[a-zA-Z0-9]{16})\\b",
      "detector_name": "voiceflow",
      "file_path": "trufflehog-main\\pkg\\detectors\\voiceflow\\voiceflow.go",
      "line_number": 30,
      "context": "\t// TODO: This includes Workspace and Legacy Workspace API keys; I haven't validated whether these actually work.\n\t// https://github.com/voiceflow/general-runtime/blob/master/tests/runtime/lib/DataAPI/utils.unit.ts\n\tkeyPat = regexp.MustCompile(`\\b(VF\\.(?:(?:DM|WS)\\.)?[a-fA-F0-9]{24}\\.[a-zA-Z0-9]{16})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "([a-zA-Z0-9]{64}_[a-zA-Z0-9]{4}_[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12})",
      "detector_name": "webexbot",
      "file_path": "trufflehog-main\\pkg\\detectors\\webexbot\\webexbot.go",
      "line_number": 25,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tkeyPat        = regexp.MustCompile(`([a-zA-Z0-9]{64}_[a-zA-Z0-9]{4}_[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "([a-zA-Z0-9]{64}_[a-zA-Z0-9]{4}_[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12})",
      "detector_name": "webexbot",
      "file_path": "trufflehog-main\\pkg\\detectors\\webexbot\\webexbot.go",
      "line_number": 25,
      "context": "var (\n\tdefaultClient = common.SaneHttpClient()\n\tkeyPat        = regexp.MustCompile(`([a-zA-Z0-9]{64}_[a-zA-Z0-9]{4}_[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b(\\d{6})\\b",
      "detector_name": "wepay",
      "file_path": "trufflehog-main\\pkg\\detectors\\wepay\\wepay.go",
      "line_number": 26,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\n\tappIDPat = regexp.MustCompile(`\\b(\\d{6})\\b`)\n\tkeyPat   = regexp.MustCompile(detectors.PrefixRegex([]string{\"wepay\"}) + `\\b([a-zA-Z0-9_?]{62})\\b`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(\\d{6})\\b",
      "detector_name": "wepay",
      "file_path": "trufflehog-main\\pkg\\detectors\\wepay\\wepay.go",
      "line_number": 26,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\n\tappIDPat = regexp.MustCompile(`\\b(\\d{6})\\b`)\n\tkeyPat   = regexp.MustCompile(detectors.PrefixRegex([]string{\"wepay\"}) + `\\b([a-zA-Z0-9_?]{62})\\b`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": "appIDPat"
    },
    {
      "pattern": "\\b(xai-[0-9a-zA-Z_]{80})\\b",
      "detector_name": "xai",
      "file_path": "trufflehog-main\\pkg\\detectors\\xai\\xai.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(xai-[0-9a-zA-Z_]{80})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(xai-[0-9a-zA-Z_]{80})\\b",
      "detector_name": "xai",
      "file_path": "trufflehog-main\\pkg\\detectors\\xai\\xai.go",
      "line_number": 28,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(xai-[0-9a-zA-Z_]{80})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "(https:\\/\\/hooks\\.zapier\\.com\\/hooks\\/catch\\/[A-Za-z0-9\\/]{16})",
      "detector_name": "zapierwebhook",
      "file_path": "trufflehog-main\\pkg\\detectors\\zapierwebhook\\zapierwebhook.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(https:\\/\\/hooks\\.zapier\\.com\\/hooks\\/catch\\/[A-Za-z0-9\\/]{16})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(https:\\/\\/hooks\\.zapier\\.com\\/hooks\\/catch\\/[A-Za-z0-9\\/]{16})",
      "detector_name": "zapierwebhook",
      "file_path": "trufflehog-main\\pkg\\detectors\\zapierwebhook\\zapierwebhook.go",
      "line_number": 25,
      "context": "\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`(https:\\/\\/hooks\\.zapier\\.com\\/hooks\\/catch\\/[A-Za-z0-9\\/]{16})`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([a-zA-Z-0-9-]{5,16}\\@[a-zA-Z-0-9]{4,16}\\.[a-zA-Z-0-9]{3,6})\\b",
      "detector_name": "zendeskapi",
      "file_path": "trufflehog-main\\pkg\\detectors\\zendeskapi\\zendeskapi.go",
      "line_number": 26,
      "context": "\n\ttoken  = regexp.MustCompile(detectors.PrefixRegex([]string{\"zendesk\"}) + `([A-Za-z0-9_-]{40})`)\n\temail  = regexp.MustCompile(`\\b([a-zA-Z-0-9-]{5,16}\\@[a-zA-Z-0-9]{4,16}\\.[a-zA-Z-0-9]{3,6})\\b`)\n\tdomain = regexp.MustCompile(`\\b([a-zA-Z-0-9]{3,25}\\.zendesk\\.com)\\b`)\n)",
      "pattern_type": "emailPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z-0-9]{3,25}\\.zendesk\\.com)\\b",
      "detector_name": "zendeskapi",
      "file_path": "trufflehog-main\\pkg\\detectors\\zendeskapi\\zendeskapi.go",
      "line_number": 27,
      "context": "\ttoken  = regexp.MustCompile(detectors.PrefixRegex([]string{\"zendesk\"}) + `([A-Za-z0-9_-]{40})`)\n\temail  = regexp.MustCompile(`\\b([a-zA-Z-0-9-]{5,16}\\@[a-zA-Z-0-9]{4,16}\\.[a-zA-Z-0-9]{3,6})\\b`)\n\tdomain = regexp.MustCompile(`\\b([a-zA-Z-0-9]{3,25}\\.zendesk\\.com)\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(1000\\.[a-f0-9]{32}\\.[a-f0-9]{32})\\b",
      "detector_name": "zohocrm",
      "file_path": "trufflehog-main\\pkg\\detectors\\zohocrm\\zohocrm.go",
      "line_number": 31,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(1000\\.[a-f0-9]{32}\\.[a-f0-9]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b(1000\\.[a-f0-9]{32}\\.[a-f0-9]{32})\\b",
      "detector_name": "zohocrm",
      "file_path": "trufflehog-main\\pkg\\detectors\\zohocrm\\zohocrm.go",
      "line_number": 31,
      "context": "\tdefaultClient = common.SaneHttpClient()\n\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat = regexp.MustCompile(`\\b(1000\\.[a-f0-9]{32}\\.[a-f0-9]{32})\\b`)\n)\n",
      "pattern_type": "keyPat",
      "is_compiled": true,
      "variable_name": "keyPat"
    },
    {
      "pattern": "\\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\\b",
      "detector_name": "zulipchat",
      "file_path": "trufflehog-main\\pkg\\detectors\\zulipchat\\zulipchat.go",
      "line_number": 30,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(common.BuildRegex(common.AlphaNumPattern, \"\", 32))\n\tidPat     = regexp.MustCompile(`\\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\\b`)\n\tdomainPat = regexp.MustCompile(`(?i)\\b([a-z0-9-]+\\.zulip(?:chat)?\\.com|chat\\.zulip\\.org)\\b`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "\\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\\b",
      "detector_name": "zulipchat",
      "file_path": "trufflehog-main\\pkg\\detectors\\zulipchat\\zulipchat.go",
      "line_number": 30,
      "context": "\t// Make sure that your group is surrounded in boundary characters such as below to reduce false positives.\n\tkeyPat    = regexp.MustCompile(common.BuildRegex(common.AlphaNumPattern, \"\", 32))\n\tidPat     = regexp.MustCompile(`\\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\\b`)\n\tdomainPat = regexp.MustCompile(`(?i)\\b([a-z0-9-]+\\.zulip(?:chat)?\\.com|chat\\.zulip\\.org)\\b`)\n)",
      "pattern_type": "idPat",
      "is_compiled": true,
      "variable_name": "idPat"
    },
    {
      "pattern": "(?i)\\b([a-z0-9-]+\\.zulip(?:chat)?\\.com|chat\\.zulip\\.org)\\b",
      "detector_name": "zulipchat",
      "file_path": "trufflehog-main\\pkg\\detectors\\zulipchat\\zulipchat.go",
      "line_number": 31,
      "context": "\tkeyPat    = regexp.MustCompile(common.BuildRegex(common.AlphaNumPattern, \"\", 32))\n\tidPat     = regexp.MustCompile(`\\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\\b`)\n\tdomainPat = regexp.MustCompile(`(?i)\\b([a-z0-9-]+\\.zulip(?:chat)?\\.com|chat\\.zulip\\.org)\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": ""
    },
    {
      "pattern": "(?i)\\b([a-z0-9-]+\\.zulip(?:chat)?\\.com|chat\\.zulip\\.org)\\b",
      "detector_name": "zulipchat",
      "file_path": "trufflehog-main\\pkg\\detectors\\zulipchat\\zulipchat.go",
      "line_number": 31,
      "context": "\tkeyPat    = regexp.MustCompile(common.BuildRegex(common.AlphaNumPattern, \"\", 32))\n\tidPat     = regexp.MustCompile(`\\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})\\b`)\n\tdomainPat = regexp.MustCompile(`(?i)\\b([a-z0-9-]+\\.zulip(?:chat)?\\.com|chat\\.zulip\\.org)\\b`)\n)\n",
      "pattern_type": "generic",
      "is_compiled": true,
      "variable_name": "domainPat"
    }
  ],
  "statistics": {
    "total_patterns": 448,
    "patterns_by_type": {
      "verification": 2,
      "generic": 66,
      "emailPat": 1,
      "tokenPat": 22,
      "passwordPat": 12,
      "usernamePat": 6,
      "idPat": 23,
      "keyPat": 229,
      "secretPat": 34,
      "urlPat": 53
    }
  }
}